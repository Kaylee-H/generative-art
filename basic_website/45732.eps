%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1505.m00.i125.n025.S.c12.140130823 Comic book explosion boom.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Антон
%%CreationDate: 5/13/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">w</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-05-13T19:02:17+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-05-13T19:02:17+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-05-13T19:02:16+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FVryKjIp6yHivzALfqXImQBHmkRu/JdkkOxV2KuxV2KuxV2KuxV2KuxV2KrJhN&#xA;w/dFQ9Ru4JFK79CO2U5xk4f3ZAltz3HPflXRMavdflyHVFad8Fq7CrsVdirsVdirsVdirsVdirsV&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:e5f1a035-ea53-174c-81d7-d2bf29e2b49d</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:e5f1a035-ea53-174c-81d7-d2bf29e2b49d</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:4feb7a46-09c8-d44e-aa73-fbb7b2f26f02</stRef:instanceID>
            <stRef:documentID>xmp.did:4feb7a46-09c8-d44e-aa73-fbb7b2f26f02</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e5f1a035-ea53-174c-81d7-d2bf29e2b49d</stEvt:instanceID>
                  <stEvt:when>2015-05-13T19:02:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р§РµСЂРЅС‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>РћС‚С‚РµРЅРєРё СЃРµСЂРѕРіРѕ</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
54.5271 159.726 mo
54.5271 159.726 135.296 184.377 153.017 182.17 cv
157.643 181.595 163.018 171.113 163.044 166.452 cv
163.122 152.284 133.097 118.34 133.097 118.34 cv
133.097 118.34 189.032 185.256 188.68 171.229 cv
188.415 160.665 153.231 85.2392 153.231 85.2392 cv
153.231 85.2392 174.218 128.137 193.023 144.776 cv
196.514 147.865 209.393 148.925 212.425 145.385 cv
228.853 126.205 230 111.5 230 111.5 cv
230 111.5 229.094 136.358 237.015 150.337 cv
239.313 154.392 243.349 146.335 247.785 144.903 cv
257.192 141.864 285.604 100.895 285.604 100.895 cv
285.604 100.895 257.828 156.434 264.102 153.922 cv
287.547 144.537 339.907 87.1563 339.907 87.1563 cv
339.907 87.1563 265.593 162.878 277.664 166.717 cv
301.73 174.371 367.691 120.9 367.691 120.9 cv
367.691 120.9 297.946 166.057 287.617 182.482 cv
285.136 186.427 289.497 197.586 293.338 200.227 cv
314.306 214.641 389.635 206.027 389.635 206.027 cv
389.635 206.027 320.732 209.673 294.465 218.837 cv
290.064 220.372 287.36 234.146 290.929 237.143 cv
312.204 255.007 371.324 282.068 371.324 282.068 cv
371.324 282.068 288.683 241.931 282.952 253.994 cv
279.203 261.885 339.631 307.329 339.631 307.329 cv
339.631 307.329 290.716 269.664 271.035 268.333 cv
266.384 268.018 255.348 274.631 255.926 279.257 cv
260.658 317.134 280.553 377.189 280.553 377.189 cv
280.553 377.189 258.724 325.058 238.575 286.08 cv
233.28 275.837 221.308 283.879 220.072 288.374 cv
214.972 306.927 205.799 368.477 205.799 368.477 cv
205.799 368.477 214.252 270.485 201.58 285.994 cv
195.002 294.046 163.102 365.886 163.102 365.886 cv
163.102 365.886 184.355 303.713 184.261 279.091 cv
184.212 266.235 146.053 313.509 146.053 313.509 cv
146.053 313.509 169.03 280.839 169.203 268.097 cv
169.266 263.436 161.926 252.808 157.352 253.704 cv
128.619 259.331 75.3767 283.741 75.3767 283.741 cv
75.3767 283.741 122.467 264.314 149.452 236.816 cv
152.717 233.489 150.026 220.844 146.001 218.494 cv
137.15 213.325 90.1044 204.669 90.1044 204.669 cv
90.1044 204.669 152.402 213.244 147.215 199.889 cv
141.748 185.811 54.5271 159.726 54.5271 159.726 cv
cp
.772549 .145098 .0509804 rgb
f
353.483 275.517 mo
353.483 275.517 291.353 247.898 276.974 247.924 cv
273.221 247.931 267.898 255.78 267.42 259.503 cv
265.968 270.817 286.635 300.888 286.635 300.888 cv
286.635 300.888 257.742 257.315 255.287 268.342 cv
250.62 289.304 296.896 397.513 296.896 397.513 cv
296.896 397.513 254.734 289.027 241.336 273.886 cv
238.849 271.075 234.103 273.062 231.332 275.593 cv
216.323 289.311 199.854 379.692 199.854 379.692 cv
199.854 379.692 216.51 285.872 211.55 273.924 cv
210.111 270.458 201.271 267.706 197.585 268.416 cv
189.769 269.922 143.989 329.592 143.989 329.592 cv
143.989 329.592 190.69 258.216 185.429 259.608 cv
165.773 264.81 118.303 305.533 118.303 305.533 cv
118.303 305.533 185.116 252.305 175.846 248.054 cv
157.364 239.577 99.4073 275.842 99.4073 275.842 cv
99.4073 275.842 159.572 246.592 169.437 234.479 cv
171.807 231.569 169.416 222.224 166.605 219.737 cv
151.261 206.162 56.4637 201.361 56.4637 201.361 cv
56.4637 201.361 145.639 209.502 167.528 204.754 cv
171.196 203.958 174.708 193.216 172.149 190.471 cv
156.898 174.109 72.9439 121.188 72.9439 121.188 cv
72.9439 121.188 174.414 186.865 180.176 177.786 cv
183.946 171.847 140.109 129.606 140.109 129.606 cv
140.109 129.606 175.508 164.502 191.106 167.496 cv
194.792 168.203 204.26 164 204.252 160.247 cv
204.183 129.513 177.538 23.4082 177.538 23.4082 cv
177.538 23.4082 206.506 123.37 218.787 156.495 cv
222.014 165.2 232.37 159.947 233.798 156.476 cv
239.693 142.149 253.058 93.8598 253.058 93.8598 cv
253.058 93.8598 236.696 171.343 248.343 160.191 cv
254.389 154.401 317.61 49.8451 317.61 49.8451 cv
317.61 49.8451 263.846 147.719 261.507 167.406 cv
260.286 177.684 295.416 143.646 295.416 143.646 cv
295.416 143.646 273.851 167.502 272.463 177.668 cv
271.956 181.386 276.78 190.6 280.523 190.332 cv
304.037 188.652 391.388 162.002 391.388 162.002 cv
391.388 162.002 309.442 185.273 285.18 204.603 cv
282.245 206.941 283.156 217.311 286.142 219.584 cv
292.709 224.582 329.458 236.112 329.458 236.112 cv
329.458 236.112 280.512 223.151 283.348 234.333 cv
286.337 246.119 353.483 275.517 353.483 275.517 cv
cp
1 .47451 0 rgb
f
199.693 54.1734 mo
199.693 54.1734 214.223 130.665 223.626 144.182 cv
226.08 147.71 236.94 147.6 240.755 145.622 cv
252.351 139.608 267.174 100.543 267.174 100.543 cv
267.174 100.543 245.009 156.158 256.989 151.276 cv
279.762 141.997 351.426 27.8617 351.426 27.8617 cv
351.426 27.8617 276.818 138.305 271.306 160.79 cv
270.283 164.964 275.248 168.137 279.438 169.093 cv
302.138 174.272 397.947 130.822 397.947 130.822 cv
397.947 130.822 298.781 176.339 290.77 188.801 cv
288.446 192.416 291.622 202.532 294.694 205.537 cv
301.209 211.911 387.231 216.08 387.231 216.08 cv
387.231 216.08 289.591 218.68 294.332 222.723 cv
312.049 237.831 381.34 255.948 381.34 255.948 cv
381.34 255.948 287.663 227.782 289.708 239.28 cv
293.785 262.204 365.72 293.099 365.72 293.099 cv
365.72 293.099 298.947 255.55 281.112 254.166 cv
276.827 253.833 269.591 262.179 269.083 266.447 cv
266.314 289.742 323.627 382.098 323.627 382.098 cv
323.627 382.098 273.125 292.856 254.379 275.35 cv
251.238 272.417 238.837 276.118 237.922 280.317 cv
232.469 305.343 237.419 418.879 237.419 418.879 cv
237.419 418.879 233.051 280.538 220.747 281.036 cv
212.699 281.361 201.534 350.172 201.534 350.172 cv
201.534 350.172 211.289 294.094 203.933 277.46 cv
202.195 273.53 192.063 267.36 188.536 269.815 cv
159.653 289.926 77.1664 384.211 77.1664 384.211 cv
77.1664 384.211 152.357 291.747 175.525 258.582 cv
181.612 249.867 169.913 243.546 165.715 244.465 cv
148.386 248.262 94.2183 267.179 94.2183 267.179 cv
94.2183 267.179 177.818 232.041 159.725 228.353 cv
150.332 226.439 20.8969 241.384 20.8969 241.384 cv
20.8969 241.384 137.875 221.896 157.929 211.257 cv
168.4 205.702 113.45 194.839 113.45 194.839 cv
113.45 194.839 149.969 199.576 160.442 194.252 cv
164.273 192.304 169.798 181.754 167.105 178.405 cv
150.186 157.369 68.1291 92.5373 68.1291 92.5373 cv
68.1291 92.5373 143.481 154.487 177.499 164.714 cv
181.615 165.951 190.78 158.331 190.972 154.038 cv
191.393 144.596 178.276 102.488 178.276 102.488 cv
178.276 102.488 198.001 157.01 206.676 147.047 cv
215.82 136.546 199.693 54.1734 199.693 54.1734 cv
cp
.94902 .858824 0 rgb
f
251.757 88.1592 mo
251.757 95.8727 245.504 102.126 237.79 102.126 cv
230.077 102.126 223.824 95.8727 223.824 88.1592 cv
223.824 80.4456 230.077 74.1925 237.79 74.1925 cv
245.504 74.1925 251.757 80.4456 251.757 88.1592 cv
cp
1 .47451 0 rgb
f
234.438 96.3995 mo
234.438 101.105 230.624 104.919 225.919 104.919 cv
221.213 104.919 217.399 101.105 217.399 96.3995 cv
217.399 91.6942 221.213 87.8798 225.919 87.8798 cv
230.624 87.8798 234.438 91.6942 234.438 96.3995 cv
cp
f
259.032 89.7653 mo
259.032 95.5891 254.311 100.31 248.487 100.31 cv
242.664 100.31 237.943 95.5891 237.943 89.7653 cv
237.943 83.9416 242.664 79.2205 248.487 79.2205 cv
254.311 79.2205 259.032 83.9416 259.032 89.7653 cv
cp
f
271.031 92 mo
271.031 97.6695 266.435 102.265 260.766 102.265 cv
255.096 102.265 250.5 97.6695 250.5 92 cv
250.5 86.3305 255.096 81.7345 260.766 81.7345 cv
266.435 81.7345 271.031 86.3305 271.031 92 cv
cp
f
249.477 82.5437 mo
249.497 82.5473 249.518 82.5487 249.538 82.5524 cv
251.44 82.9069 253.147 83.8232 254.479 85.1237 cv
254.49 85.135 254.501 85.1477 254.512 85.1591 cv
253.694 85.2795 252.912 85.5312 252.188 85.8917 cv
251.617 84.5488 250.679 83.3841 249.477 82.5437 cv
cp
260.765 82.6781 mo
259.069 82.6781 257.478 83.136 256.106 83.9315 cv
254.349 81.6432 251.588 80.1641 248.487 80.1641 cv
248.346 80.1641 248.206 80.1674 248.066 80.1735 cv
245.682 77.1111 241.964 75.136 237.79 75.136 cv
230.609 75.136 224.767 80.9781 224.767 88.1591 cv
224.767 88.2728 224.772 88.3855 224.775 88.4985 cv
222.573 88.9194 220.859 90.5211 220.214 92.5545 cv
220.25 92.5252 220.287 92.4973 220.323 92.4685 cv
221.343 90.9579 222.935 89.8459 224.836 89.4734 cv
224.994 89.4423 225.154 89.4146 225.317 89.394 cv
225.423 89.3807 225.527 89.3715 225.632 89.3629 cv
225.683 89.0352 225.749 88.7128 225.824 88.3936 cv
227.171 82.6382 232.342 78.3379 238.502 78.3379 cv
241.19 78.3379 243.689 79.1582 245.766 80.5594 cv
246.131 80.8058 246.481 81.0718 246.819 81.3526 cv
246.63 81.3082 246.438 81.2701 246.243 81.2394 cv
243.192 80.7585 240.281 82.1235 238.633 84.5032 cv
238.6 84.4996 238.569 84.4932 238.536 84.4899 cv
233.746 84.0131 229.339 86.4355 227.048 90.3283 cv
227.131 90.2872 227.216 90.2491 227.3 90.2091 cv
230.19 87.5053 234.184 86.0115 238.432 86.4344 cv
242.665 86.8559 246.276 89.0949 248.577 92.2983 cv
247.282 88.7469 244.341 85.9373 240.589 84.8839 cv
241.517 84.2582 243.235 83.3642 245.819 83.0858 cv
248.27 82.8217 250.542 84.1655 251.983 85.9923 cv
250.859 86.594 249.888 87.4672 249.172 88.5396 cv
249.227 88.516 249.284 88.4943 249.339 88.4714 cv
251.319 86.8209 253.971 85.9981 256.718 86.4311 cv
259.455 86.8625 261.719 88.4525 263.096 90.6209 cv
262.315 88.0273 260.207 85.9389 257.44 85.2859 cv
258.498 84.8673 259.649 84.6348 260.854 84.6348 cv
265.516 84.6348 269.389 88.0742 270.07 92.5485 cv
270.081 92.3669 270.087 92.1843 270.087 92.0001 cv
270.087 86.8599 265.906 82.6781 260.765 82.6781 cv
cp
.94902 .847059 .0666667 rgb
f
220.74 103.165 mo
227.798 108.367 234.563 111.632 234.563 111.632 cv
232.21 106.143 232.733 103.529 234.824 103.529 cv
236.915 103.529 238.222 113.984 238.222 115.813 cv
239.006 107.711 241.881 102.222 243.972 103.791 cv
246.063 105.359 245.801 109.541 245.278 110.847 cv
247.19 108.054 249.142 102.149 251.233 103.717 cv
253.324 105.285 250.244 113.722 249.199 115.029 cv
261.259 106.508 269.043 98.0731 269.043 98.0731 cv
269.043 98.0731 237.728 87.2216 220.74 103.165 cv
cp
1 .47451 0 rgb
f
251.233 103.717 mo
253.324 105.285 250.244 113.722 249.199 115.029 cv
249.888 114.211 250.635 113.4 251.417 112.601 cv
254.194 107.617 257.709 99.6278 253.642 97.7793 cv
248.1 95.26 244.55 112.248 246.585 106.143 cv
247.108 104.836 246.585 99.0861 244.494 97.5179 cv
242.403 95.9497 239.326 102.847 238.587 110.368 cv
238.587 108.538 237.549 101.431 235.608 100.654 cv
231.688 99.0861 229.335 104.836 233.923 110.96 cv
233.922 110.961 233.921 110.962 233.921 110.962 cv
234.163 111.2 234.385 111.428 234.563 111.632 cv
232.21 106.143 232.733 103.529 234.824 103.529 cv
236.915 103.529 238.222 113.984 238.222 115.813 cv
239.006 107.711 241.881 102.222 243.972 103.791 cv
246.063 105.359 245.801 109.541 245.278 110.847 cv
247.19 108.054 249.142 102.149 251.233 103.717 cv
cp
.866667 .392157 0 rgb
f
384.664 263 mo
372.161 260.94 363.694 249.134 365.754 236.631 cv
367.814 224.127 379.62 215.661 392.124 217.721 cv
404.628 219.781 413.094 231.587 411.034 244.09 cv
408.974 256.594 397.168 265.06 384.664 263 cv
cp
1 .47451 0 rgb
f
374.762 218.095 mo
367.135 216.838 361.97 209.636 363.227 202.009 cv
364.483 194.382 371.685 189.217 379.312 190.474 cv
386.94 191.73 392.104 198.932 390.847 206.559 cv
389.591 214.187 382.389 219.351 374.762 218.095 cv
cp
f
383.933 236.733 mo
374.493 235.178 368.101 226.264 369.656 216.824 cv
371.212 207.384 380.125 200.992 389.565 202.547 cv
399.006 204.102 405.398 213.016 403.842 222.456 cv
402.287 231.896 393.374 238.289 383.933 236.733 cv
cp
f
370.684 278.411 mo
362.883 277.126 357.601 269.76 358.886 261.96 cv
360.172 254.159 367.537 248.877 375.337 250.162 cv
383.138 251.448 388.42 258.813 387.135 266.613 cv
385.849 274.414 378.484 279.696 370.684 278.411 cv
cp
f
364.902 197.965 mo
362.16 204.041 353.915 211.821 350.038 214.228 cv
359.563 211.881 363.66 213.426 363.101 216.816 cv
362.543 220.205 345.247 219.531 342.282 219.043 cv
355.206 222.477 363.335 228.604 360.235 231.574 cv
357.134 234.545 350.426 233.004 348.447 231.808 cv
352.465 235.653 361.515 240.393 358.415 243.364 cv
355.314 246.334 342.46 239.09 340.621 237.046 cv
351.142 249.345 359.67 269.341 359.67 269.341 cv
359.67 269.341 386.209 229.761 364.902 197.965 cv
cp
f
358.415 243.364 mo
355.314 246.334 342.46 239.09 340.621 237.046 cv
341.763 238.381 342.879 239.809 343.966 241.29 cv
351.303 247.122 363.314 254.954 367.397 248.855 cv
369.785 245.287 362.931 238.981 355.724 235.183 cv
357.703 236.379 367.163 237.067 370.263 234.097 cv
373.364 231.126 363.006 224.296 351.012 221.089 cv
353.977 221.577 365.775 221.794 367.552 218.854 cv
371.141 212.918 362.449 207.57 351.296 213.371 cv
351.295 213.369 351.295 213.368 351.294 213.366 cv
350.843 213.695 350.415 213.994 350.038 214.228 cv
359.563 211.881 363.66 213.426 363.102 216.816 cv
362.543 220.205 345.247 219.531 342.282 219.043 cv
355.206 222.478 363.335 228.604 360.235 231.574 cv
357.134 234.545 350.426 233.004 348.447 231.808 cv
352.465 235.653 361.515 240.393 358.415 243.364 cv
cp
.866667 .392157 0 rgb
f
399.124 210.766 mo
396.753 207.461 393.238 205.276 389.225 204.616 cv
389.124 204.599 389.023 204.591 388.922 204.576 cv
388.99 201.999 388.236 199.481 386.708 197.35 cv
384.855 194.767 382.108 193.059 378.972 192.542 cv
377.917 192.369 376.849 192.336 375.797 192.445 cv
370.484 192.997 366.165 197.07 365.295 202.349 cv
365.03 203.96 365.1 205.574 365.477 207.113 cv
365.492 206.569 365.53 206.023 365.62 205.477 cv
366.49 200.198 370.809 196.125 376.123 195.573 cv
377.174 195.463 378.242 195.496 379.297 195.67 cv
382.433 196.186 385.18 197.894 387.033 200.477 cv
387.932 201.731 388.563 203.121 388.92 204.576 cv
387.67 204.395 386.408 204.362 385.164 204.492 cv
378.365 205.198 372.838 210.41 371.726 217.165 cv
371.412 219.071 371.47 220.979 371.861 222.813 cv
371.86 221.976 371.912 221.135 372.051 220.292 cv
373.163 213.538 378.69 208.326 385.49 207.619 cv
386.835 207.479 388.2 207.52 389.55 207.743 cv
393.563 208.404 397.078 210.588 399.449 213.893 cv
400.694 215.629 401.533 217.567 401.964 219.594 cv
401.961 216.443 400.997 213.378 399.124 210.766 cv
cp
.94902 .847059 .0666667 rgb
f
408.567 239.927 mo
407.044 249.176 399.477 256.311 390.167 257.279 cv
388.325 257.47 386.454 257.414 384.607 257.109 cv
379.113 256.204 374.299 253.213 371.054 248.688 cv
369.293 246.233 368.13 243.481 367.56 240.603 cv
367.6 244.854 368.923 248.985 371.452 252.51 cv
374.697 257.035 379.51 260.027 385.005 260.931 cv
386.852 261.236 388.723 261.293 390.564 261.101 cv
399.875 260.133 407.441 252.998 408.965 243.75 cv
409.383 241.212 409.298 238.711 408.824 236.325 cv
408.836 237.513 408.767 238.715 408.567 239.927 cv
cp
.866667 .392157 0 rgb
f
384.56 261.408 mo
383.668 266.827 379.234 271.01 373.778 271.577 cv
372.697 271.689 371.601 271.655 370.518 271.477 cv
365.83 270.705 362.213 267.34 360.865 263.093 cv
360.239 269.441 364.642 275.291 371.024 276.343 cv
372.107 276.52 373.203 276.554 374.284 276.442 cv
379.74 275.875 384.173 271.693 385.066 266.273 cv
385.389 264.314 385.213 262.389 384.65 260.615 cv
384.624 260.879 384.604 261.143 384.56 261.408 cv
cp
f
377.8 218.72 mo
382.636 216.488 388.306 218.32 390.97 222.798 cv
390.818 221.957 390.57 221.12 390.195 220.307 cv
387.81 215.139 381.687 212.883 376.518 215.268 cv
371.349 217.654 369.093 223.777 371.478 228.946 cv
371.631 229.279 371.801 229.598 371.985 229.906 cv
371.169 225.395 373.443 220.73 377.8 218.72 cv
cp
.94902 .847059 .0666667 rgb
f
336.919 97.8092 mo
338.267 116.582 332.038 132.317 322.717 148.582 cv
332.515 142.428 340.136 128.092 343.682 135.196 cv
345.398 138.635 338.378 146.819 326.559 156.478 cv
340.479 148.977 352.846 144.936 381.226 152.981 cv
368.622 137.016 336.919 97.8092 336.919 97.8092 cv
cp
1 .47451 0 rgb
f
347.447 127.898 mo
343.542 122.212 332.408 141.441 322.717 148.582 cv
332.8 145.183 340.136 128.092 343.682 135.196 cv
345.398 138.635 335.752 148.965 326.559 156.478 cv
339.754 148.812 354.241 137.79 347.447 127.898 cv
cp
.866667 .392157 0 rgb
f
364.254 109.771 mo
356.93 115.559 346.301 114.315 340.512 106.991 cv
334.724 99.6683 335.969 89.0393 343.292 83.2511 cv
350.616 77.4629 361.245 78.7073 367.034 86.0305 cv
372.822 93.3537 371.577 103.983 364.254 109.771 cv
cp
1 .47451 0 rgb
f
389.021 134.761 mo
377.006 144.257 359.568 142.215 350.073 130.201 cv
340.577 118.187 342.618 100.749 354.633 91.2535 cv
366.648 81.7578 384.085 83.7995 393.581 95.8139 cv
403.077 107.828 401.036 125.266 389.021 134.761 cv
cp
f
356.284 93.3406 mo
354.869 94.4588 353.578 95.7247 352.444 97.1035 cv
349.628 100.528 347.868 104.555 347.156 108.736 cv
343.65 103.571 343.895 96.5695 347.898 91.7016 cv
348.542 90.9189 349.277 90.1992 350.081 89.5634 cv
354.506 86.0662 360.377 85.6387 365.141 87.9497 cv
365.074 87.861 365.016 87.768 364.947 87.6805 cv
360.078 81.52 351.103 80.4692 344.943 85.338 cv
344.139 85.9739 343.404 86.6935 342.76 87.4762 cv
338.541 92.6072 338.473 100.12 342.599 105.342 cv
343.844 106.917 345.389 108.157 347.112 109.068 cv
346.056 115.818 347.723 122.937 352.16 128.551 cv
354.161 131.082 356.566 133.102 359.199 134.635 cv
357.846 133.522 356.584 132.259 355.454 130.829 cv
348.191 121.64 348.31 108.414 355.738 99.3818 cv
356.872 98.003 358.164 96.7371 359.578 95.619 cv
367.891 89.049 379.104 88.6244 387.752 93.6592 cv
378.84 86.3245 365.699 85.9 356.284 93.3406 cv
cp
.94902 .847059 .0666667 rgb
f
394.985 149.715 mo
387.728 155.451 377.195 154.218 371.46 146.961 cv
365.724 139.704 366.957 129.171 374.214 123.435 cv
381.471 117.7 392.004 118.933 397.74 126.19 cv
403.475 133.447 402.242 143.979 394.985 149.715 cv
cp
1 .47451 0 rgb
f
390.822 122.773 mo
390.583 123.064 390.314 123.334 390.055 123.61 cv
389.98 123.579 389.911 123.536 389.837 123.506 cv
389.895 123.556 389.948 123.613 390.006 123.663 cv
389.429 124.272 388.824 124.857 388.161 125.381 cv
385.537 127.454 382.441 128.687 379.193 129.021 cv
379.351 129.044 379.507 129.075 379.667 129.094 cv
383.723 129.569 387.72 128.435 390.925 125.904 cv
391.166 125.713 391.386 125.499 391.615 125.295 cv
391.705 125.402 391.804 125.497 391.891 125.607 cv
395.972 130.772 395.905 138.205 391.731 143.28 cv
391.095 144.054 390.368 144.765 389.573 145.395 cv
386.62 147.727 382.937 148.772 379.199 148.334 cv
377.945 148.188 376.742 147.867 375.6 147.411 cv
377.678 149.144 380.211 150.245 382.961 150.567 cv
386.699 151.005 390.383 149.96 393.335 147.628 cv
394.131 146.998 394.857 146.287 395.493 145.513 cv
399.667 140.437 399.734 133.005 395.653 127.84 cv
394.674 126.602 393.501 125.586 392.211 124.759 cv
392.582 124.392 392.937 124.009 393.266 123.609 cv
397.796 118.101 397.868 110.035 393.439 104.431 cv
393.227 104.162 392.985 103.927 392.757 103.676 cv
395.932 109.752 395.281 117.352 390.822 122.773 cv
cp
.866667 .392157 0 rgb
f
52.8733 301.397 mo
61.1947 301.337 91.8201 295.316 108.194 286.538 cv
95.3335 294.991 81.5489 304.947 82.9145 310.136 cv
84.2802 315.325 110.753 298.88 126.639 284.832 cv
111.331 301.307 95.3431 321.92 97.9222 326.819 cv
100.501 331.719 106.325 327.637 114.098 313.985 cv
107.98 334.039 109.868 346.798 107.817 362.933 cv
89.7476 349.545 56.9901 340.172 52.8733 301.397 cv
cp
1 .47451 0 rgb
f
71.2637 343.025 mo
80.642 335.081 94.6846 336.244 102.629 345.622 cv
110.573 355 109.41 369.043 100.032 376.987 cv
90.6537 384.931 76.6111 383.769 68.6669 374.391 cv
60.7228 365.012 61.8854 350.97 71.2637 343.025 cv
cp
f
39.0914 321.84 mo
50.751 311.963 68.2094 313.409 78.0859 325.068 cv
87.9623 336.728 86.5169 354.186 74.8574 364.062 cv
63.1979 373.939 45.7395 372.494 35.863 360.834 cv
25.9865 349.175 27.4319 331.716 39.0914 321.84 cv
cp
f
34.9133 306.851 mo
44.9371 298.36 59.9463 299.602 68.4373 309.626 cv
76.9283 319.65 75.6858 334.659 65.6621 343.15 cv
55.6383 351.642 40.6291 350.399 32.1381 340.375 cv
23.6471 330.351 24.8896 315.342 34.9133 306.851 cv
cp
f
100.221 347.663 mo
99.3554 346.641 98.3898 345.743 97.3613 344.948 cv
99.7847 348.535 100.916 352.804 100.554 357.181 cv
100.133 362.265 97.7571 366.88 93.8638 370.177 cv
93.1424 370.788 92.3722 371.35 91.575 371.845 cv
84.7439 376.089 75.9933 375.448 69.8061 370.663 cv
70.1957 371.241 70.6138 371.807 71.0748 372.351 cv
77.1484 379.521 87.7363 381.196 95.7027 376.247 cv
96.4998 375.752 97.27 375.19 97.9914 374.579 cv
101.885 371.282 104.26 366.667 104.681 361.583 cv
105.102 356.498 103.519 351.555 100.221 347.663 cv
cp
.866667 .392157 0 rgb
f
36.2117 346.082 mo
36.7517 339.557 39.7999 333.633 44.797 329.4 cv
45.7232 328.616 46.7093 327.897 47.7316 327.262 cv
57.6613 321.094 70.7483 322.963 78.6362 331.501 cv
77.8147 329.954 76.8372 328.477 75.6779 327.108 cv
67.8828 317.906 54.2917 315.756 44.066 322.108 cv
43.0437 322.743 42.0576 323.463 41.1314 324.247 cv
36.1343 328.479 33.0861 334.404 32.5461 340.929 cv
32.0061 347.454 34.0393 353.799 38.271 358.795 cv
38.4967 359.061 38.7432 359.301 38.9783 359.555 cv
36.8008 355.455 35.8197 350.82 36.2117 346.082 cv
cp
.94902 .847059 .0666667 rgb
f
33.3925 328.452 mo
33.848 322.959 36.4128 317.974 40.6186 314.412 cv
41.3984 313.752 42.2304 313.146 43.0904 312.612 cv
51.2841 307.522 62.0349 308.93 68.709 315.759 cv
67.9894 314.324 67.112 312.944 66.0297 311.667 cv
59.4696 303.921 48.0312 302.112 39.4248 307.459 cv
38.5648 307.993 37.7328 308.598 36.953 309.259 cv
32.7472 312.82 30.1824 317.806 29.7269 323.299 cv
29.2728 328.791 30.9846 334.131 34.5465 338.335 cv
34.857 338.701 35.1883 339.042 35.5199 339.382 cv
33.8354 336.032 33.0757 332.284 33.3925 328.452 cv
cp
f
97.9222 326.819 mo
95.3431 321.92 111.331 301.307 126.639 284.832 cv
110.753 298.88 84.2802 315.325 82.9145 310.136 cv
81.5489 304.947 95.3335 294.991 108.194 286.538 cv
105.728 287.86 102.935 289.118 99.9466 290.304 cv
69.6324 305.045 69.9776 312.345 72.5266 316.589 cv
76.7179 323.567 100.04 307.349 109.747 299.505 cv
94.4395 315.98 85.996 330.048 88.5751 334.948 cv
91.0143 339.582 104.683 344.428 112.788 318.671 cv
113.183 317.147 113.606 315.597 114.098 313.985 cv
106.325 327.637 100.501 331.719 97.9222 326.819 cv
cp
.866667 .392157 0 rgb
f
268.946 366.876 mo
278.675 360.323 291.874 362.898 298.427 372.628 cv
304.98 382.357 302.405 395.556 292.676 402.109 cv
282.947 408.662 269.747 406.087 263.195 396.357 cv
256.642 386.628 259.217 373.429 268.946 366.876 cv
cp
1 .47451 0 rgb
f
291.943 348.17 mo
304.492 339.717 321.517 343.039 329.97 355.588 cv
338.422 368.137 335.101 385.162 322.551 393.615 cv
310.002 402.067 292.977 398.746 284.525 386.196 cv
276.073 373.647 279.394 356.622 291.943 348.17 cv
cp
f
328.65 359.219 mo
330.017 363.209 330.346 367.499 329.517 371.75 cv
328.27 378.143 324.608 383.666 319.206 387.305 cv
317.354 388.552 315.354 389.538 313.261 390.233 cv
309.039 391.636 304.633 391.788 300.477 390.886 cv
306.277 387.394 309.51 380.748 308.619 374.003 cv
307.382 380.653 302.668 386.448 295.794 388.732 cv
288.921 391.015 281.675 389.193 276.705 384.604 cv
279.969 390.436 286.362 393.815 292.973 393.295 cv
292.033 394.314 290.986 395.244 289.806 396.038 cv
288.422 396.97 286.928 397.706 285.362 398.226 cv
277.635 400.793 269.059 397.863 264.506 391.102 cv
263.916 390.227 263.425 389.308 263 388.365 cv
263.484 390.591 264.382 392.729 265.693 394.674 cv
270.246 401.436 278.822 404.365 286.549 401.799 cv
288.115 401.279 289.609 400.543 290.993 399.611 cv
293.543 397.894 295.57 395.613 296.956 392.964 cv
302.469 395.531 308.887 396.05 314.924 394.045 cv
317.017 393.349 319.017 392.364 320.869 391.117 cv
326.271 387.478 329.933 381.955 331.18 375.562 cv
332.28 369.919 331.377 364.199 328.65 359.219 cv
cp
.866667 .392157 0 rgb
f
259.836 380.835 mo
262.73 373.072 269.28 342.731 268.85 324.813 cv
270.291 339.361 272.468 355.228 276.62 355.539 cv
280.773 355.851 278.484 326.196 274.154 307.125 cv
280.405 326.398 289.343 347.565 293.719 346.659 cv
298.095 345.753 297.263 339.088 290.349 327.689 cv
302.376 339.5 312.068 341.633 322.757 348.464 cv
306.909 361.198 288.717 388.829 259.836 380.835 cv
cp
1 .47451 0 rgb
f
293.719 346.659 mo
289.343 347.565 280.405 326.398 274.154 307.125 cv
278.484 326.196 280.773 355.851 276.62 355.539 cv
272.468 355.228 270.291 339.361 268.85 324.813 cv
268.915 327.512 268.819 330.496 268.603 333.638 cv
268.331 366.349 273.617 368.254 277.518 367.176 cv
283.934 365.403 280.694 338.749 278.571 327.322 cv
284.822 346.595 291.794 358.744 296.17 357.838 cv
300.308 356.981 308.561 345.737 293.202 330.338 cv
292.263 329.506 291.316 328.639 290.349 327.689 cv
297.263 339.088 298.095 345.753 293.719 346.659 cv
cp
.866667 .392157 0 rgb
f
75.1906 230.318 mo
82.2963 228.674 89.3898 233.101 91.0343 240.207 cv
92.6787 247.313 88.2514 254.406 81.1456 256.051 cv
74.0398 257.695 66.9464 253.268 65.3019 246.162 cv
63.6575 239.056 68.0848 231.963 75.1906 230.318 cv
cp
1 .47451 0 rgb
f
80.1117 219.75 mo
84.9004 218.641 89.6808 221.625 90.789 226.414 cv
91.8972 231.203 88.9136 235.983 84.1249 237.091 cv
79.3362 238.199 74.5558 235.216 73.4476 230.427 cv
72.3394 225.638 75.323 220.858 80.1117 219.75 cv
cp
f
85.8764 222.399 mo
84.2677 221.395 82.3648 221.078 80.5174 221.505 cv
79.3611 221.773 78.3262 222.302 77.4408 223.079 cv
75.4691 224.809 74.6117 227.468 75.2024 230.021 cv
75.3666 230.731 75.6352 231.398 75.9926 232.01 cv
75.8603 232.036 75.7287 232.042 75.5964 232.073 cv
73.7648 232.497 72.0559 233.371 70.6535 234.602 cv
67.4864 237.381 66.1078 241.655 67.0567 245.757 cv
67.7239 248.638 69.4482 251.093 71.9132 252.71 cv
70.6524 251.299 69.7555 249.589 69.3169 247.694 cv
68.3679 243.593 69.7465 239.318 72.9136 236.539 cv
74.08 235.516 75.4658 234.761 76.9508 234.285 cv
76.9066 234.334 76.8556 234.375 76.8132 234.425 cv
75.8153 235.601 75.3354 237.095 75.4613 238.632 cv
75.5873 240.169 76.3041 241.564 77.4798 242.562 cv
77.5425 242.615 77.609 242.661 77.6734 242.711 cv
77.0096 241.843 76.603 240.804 76.5115 239.688 cv
76.3856 238.151 76.8654 236.657 77.8634 235.481 cv
78.0483 235.264 78.2497 235.058 78.4627 234.871 cv
80.532 233.056 83.6444 232.986 85.806 234.666 cv
85.5556 234.338 85.2715 234.032 84.9495 233.759 cv
82.9683 232.078 80.0974 231.974 77.9897 233.397 cv
77.7696 232.939 77.5798 232.465 77.4625 231.958 cv
77.4517 231.911 77.4497 231.864 77.4398 231.817 cv
76.9121 229.308 77.7655 226.714 79.701 225.016 cv
80.5863 224.239 81.6213 223.71 82.7776 223.442 cv
84.4879 223.047 86.2427 223.297 87.7707 224.132 cv
87.2554 223.454 86.6209 222.864 85.8764 222.399 cv
cp
.94902 .847059 .0666667 rgb
f
87.3398 221.213 mo
93.1085 225.345 107.905 232.128 116.669 233.702 cv
109.753 235.718 97.046 233.47 97.827 238.788 cv
98.205 241.363 117.351 238.604 125.125 235.256 cv
117.568 240.006 86.1662 254.531 82.3193 255.591 cv
83.1396 241.844 87.3398 221.213 87.3398 221.213 cv
cp
1 .47451 0 rgb
f
93.2084 239.957 mo
89.6509 230.635 107.905 232.128 116.669 233.702 cv
109.753 235.718 97.046 233.47 97.827 238.788 cv
98.205 241.363 117.351 238.604 125.125 235.256 cv
117.568 240.006 96.1051 247.548 93.2084 239.957 cv
cp
.866667 .392157 0 rgb
f
98.1414 112.552 mo
107.934 119.031 110.62 132.222 104.141 142.015 cv
97.6618 151.807 84.4711 154.493 74.6786 148.014 cv
64.886 141.535 62.2 128.344 68.679 118.552 cv
75.1581 108.759 88.3489 106.073 98.1414 112.552 cv
cp
1 .47451 0 rgb
f
114.445 80.6214 mo
126.619 88.6764 129.959 105.076 121.904 117.25 cv
113.849 129.425 97.4494 132.764 85.2749 124.709 cv
73.1004 116.654 69.761 100.255 77.8161 88.0805 cv
85.8711 75.9059 102.27 72.5664 114.445 80.6214 cv
cp
f
126.268 76.0364 mo
134.473 81.4648 136.723 92.5164 131.295 100.721 cv
125.866 108.926 114.815 111.176 106.61 105.748 cv
98.4055 100.319 96.155 89.2677 101.583 81.0632 cv
107.012 72.8586 118.064 70.608 126.268 76.0364 cv
cp
f
106.281 80.1493 mo
96.7276 77.4321 86.0963 81.0307 80.3308 89.7448 cv
75.4575 97.1104 75.3092 106.246 79.1447 113.566 cv
76.0094 114.923 73.2152 117.161 71.1937 120.216 cv
65.6423 128.606 67.9521 139.949 76.3424 145.5 cv
77.4001 146.2 78.5049 146.774 79.6389 147.227 cv
71.6076 141.576 69.4602 130.497 74.9137 122.255 cv
76.5292 119.813 78.6413 117.9 81.0222 116.532 cv
81.2316 116.411 81.4565 116.326 81.6693 116.213 cv
81.097 118.473 81.2082 120.85 82.0202 123.089 cv
83.0918 126.045 85.25 128.406 88.0971 129.738 cv
88.2489 129.809 88.4046 129.864 88.5581 129.928 cv
86.7867 128.575 85.43 126.749 84.6519 124.604 cv
83.5804 121.649 83.7236 118.453 85.056 115.605 cv
85.303 115.078 85.589 114.566 85.9079 114.084 cv
89.0046 109.404 95.089 107.598 100.241 109.743 cv
99.5726 109.232 98.8502 108.784 98.0703 108.419 cv
92.8258 105.966 86.4652 107.75 83.2762 112.57 cv
83.0231 112.953 82.8086 113.365 82.5999 113.778 cv
82.4548 113.375 82.3144 112.97 82.1902 112.561 cv
80.2366 106.12 81.0347 98.8959 85.0316 92.8549 cv
89.4817 86.1291 96.8295 82.4705 104.343 82.3951 cv
104.263 82.5082 104.175 82.6111 104.098 82.7271 cv
99.5953 89.5324 101.468 98.731 108.274 103.234 cv
108.521 103.397 108.777 103.534 109.03 103.681 cv
104.409 98.7964 103.563 91.1969 107.429 85.3535 cv
108.028 84.4481 108.717 83.6395 109.465 82.9127 cv
109.843 82.5456 110.239 82.2049 110.649 81.8847 cv
115.304 78.246 121.858 77.6448 127.179 80.7303 cv
126.419 79.9262 125.567 79.1876 124.605 78.5511 cv
118.763 74.6859 111.165 75.5308 106.281 80.1493 cv
cp
.94902 .847059 .0666667 rgb
f
87.7909 151.384 mo
95.5231 150.625 113.918 150.143 126.06 155.013 cv
115.693 149.509 115.248 141.985 117.54 139.887 cv
119.833 137.788 136.332 144.718 142.24 148.998 cv
133.952 140.352 119.379 127.546 123.33 121.575 cv
127.281 115.603 137.45 124.138 140.075 127.683 cv
134.288 116.624 133.801 96.87 133.888 91.957 cv
126.272 95.9556 87.7909 151.384 87.7909 151.384 cv
cp
1 .47451 0 rgb
f
140.075 127.683 mo
133.229 112.76 118.887 106.434 114.936 112.406 cv
110.985 118.377 116.843 130.023 125.13 138.669 cv
119.222 134.389 110.505 130.713 108.213 132.812 cv
105.921 134.91 105.548 147.768 126.06 155.013 cv
116.529 149.611 115.248 141.985 117.54 139.887 cv
119.833 137.788 136.332 144.718 142.24 148.998 cv
133.952 140.352 119.379 127.546 123.33 121.575 cv
127.281 115.603 137.45 124.138 140.075 127.683 cv
cp
.866667 .392157 0 rgb
f
269.128 274.54 mo
269.128 291.027 255.762 304.393 239.275 304.393 cv
222.787 304.393 209.421 291.027 209.421 274.54 cv
209.421 258.053 222.787 244.687 239.275 244.687 cv
255.762 244.687 269.128 258.053 269.128 274.54 cv
cp
1 .47451 0 rgb
f
318.572 244.687 mo
318.572 268.903 298.941 288.534 274.725 288.534 cv
250.509 288.534 230.878 268.903 230.878 244.687 cv
230.878 220.471 250.509 200.84 274.725 200.84 cv
298.941 200.84 318.572 220.471 318.572 244.687 cv
cp
f
311.731 167.566 mo
311.731 191.782 292.1 211.413 267.884 211.413 cv
243.668 211.413 224.037 191.782 224.037 167.566 cv
224.037 143.35 243.668 123.719 267.884 123.719 cv
292.1 123.719 311.731 143.35 311.731 167.566 cv
cp
f
266.329 193.688 mo
266.329 217.904 246.698 237.535 222.482 237.535 cv
198.266 237.535 178.635 217.904 178.635 193.688 cv
178.635 169.472 198.266 149.841 222.482 149.841 cv
246.698 149.841 266.329 169.472 266.329 193.688 cv
cp
f
222.793 283.869 mo
222.793 296.406 212.63 306.57 200.092 306.57 cv
187.555 306.57 177.391 296.406 177.391 283.869 cv
177.391 271.332 187.555 261.168 200.092 261.168 cv
212.63 261.168 222.793 271.332 222.793 283.869 cv
cp
f
236.476 137.713 mo
236.476 150.25 226.312 160.414 213.775 160.414 cv
201.238 160.414 191.074 150.25 191.074 137.713 cv
191.074 125.176 201.238 115.012 213.775 115.012 cv
226.312 115.012 236.476 125.176 236.476 137.713 cv
cp
f
261.353 145.798 mo
261.353 158.336 251.19 168.499 238.653 168.499 cv
226.115 168.499 215.952 158.336 215.952 145.798 cv
215.952 133.261 226.115 123.097 238.653 123.097 cv
251.19 123.097 261.353 133.261 261.353 145.798 cv
cp
f
323.256 188.921 mo
323.256 201.458 313.093 211.622 300.555 211.622 cv
288.018 211.622 277.854 201.458 277.854 188.921 cv
277.854 176.383 288.018 166.22 300.555 166.22 cv
313.093 166.22 323.256 176.383 323.256 188.921 cv
cp
f
327.59 217.632 mo
327.59 230.17 317.427 240.333 304.889 240.333 cv
292.352 240.333 282.188 230.17 282.188 217.632 cv
282.188 205.095 292.352 194.932 304.889 194.932 cv
317.427 194.932 327.59 205.095 327.59 217.632 cv
cp
f
247.36 242.51 mo
247.36 255.047 237.196 265.211 224.659 265.211 cv
212.122 265.211 201.958 255.047 201.958 242.51 cv
201.958 229.973 212.122 219.809 224.659 219.809 cv
237.196 219.809 247.36 229.973 247.36 242.51 cv
cp
f
196.361 199.596 mo
196.361 212.133 186.197 222.297 173.66 222.297 cv
161.122 222.297 150.959 212.133 150.959 199.596 cv
150.959 187.059 161.122 176.895 173.66 176.895 cv
186.197 176.895 196.361 187.059 196.361 199.596 cv
cp
f
214.397 153.573 mo
214.397 171.606 199.778 186.224 181.745 186.224 cv
163.712 186.224 149.093 171.606 149.093 153.573 cv
149.093 135.539 163.712 120.921 181.745 120.921 cv
199.778 120.921 214.397 135.539 214.397 153.573 cv
cp
f
171.172 212.968 mo
171.172 225.505 161.008 235.669 148.471 235.669 cv
135.934 235.669 125.77 225.505 125.77 212.968 cv
125.77 200.431 135.934 190.267 148.471 190.267 cv
161.008 190.267 171.172 200.431 171.172 212.968 cv
cp
f
173.349 176.273 mo
173.349 186.578 164.995 194.932 154.691 194.932 cv
144.386 194.932 136.032 186.578 136.032 176.273 cv
136.032 165.969 144.386 157.615 154.691 157.615 cv
164.995 157.615 173.349 165.969 173.349 176.273 cv
cp
f
213.464 251.839 mo
213.464 274.509 195.086 292.887 172.416 292.887 cv
149.746 292.887 131.368 274.509 131.368 251.839 cv
131.368 229.169 149.746 210.791 172.416 210.791 cv
195.086 210.791 213.464 229.169 213.464 251.839 cv
cp
f
283.873 174.073 mo
276.926 170.978 269.016 172.99 264.299 178.474 cv
263.991 178.321 263.685 178.165 263.366 178.025 cv
255.849 174.732 247.456 176.184 241.487 181.033 cv
247.842 178.511 255.148 178.402 261.894 181.358 cv
268.667 184.324 273.554 189.799 276.001 196.213 cv
275.577 189.142 271.627 182.515 265.149 178.92 cv
270.156 177.628 275.618 177.95 280.709 180.218 cv
286.78 182.923 291.15 187.866 293.291 193.642 cv
295.322 185.828 291.491 177.467 283.873 174.073 cv
cp
208.782 147.521 mo
200.963 149.281 195.666 156.227 195.669 163.92 cv
198.937 159.227 203.9 155.694 209.918 154.339 cv
216.402 152.88 222.861 154.232 228.028 157.583 cv
224.988 150.104 216.919 145.69 208.782 147.521 cv
cp
180.623 174.337 mo
177.589 170.459 172.251 169.084 167.688 171.13 cv
165.635 165.954 160.59 162.28 154.691 162.28 cv
146.974 162.28 140.697 168.557 140.697 176.273 cv
140.697 178.239 141.108 180.109 141.843 181.809 cv
141.782 181.278 141.743 180.742 141.743 180.195 cv
141.743 172.479 148.02 166.202 155.737 166.202 cv
160.213 166.202 164.196 168.321 166.758 171.603 cv
162.345 174.111 160.354 179.27 161.697 183.974 cv
162.893 180.491 165.343 177.426 168.832 175.525 cv
172.591 173.476 176.83 173.173 180.623 174.337 cv
cp
202.604 169.114 mo
194.98 167.92 187.808 173.152 186.614 180.775 cv
186.484 181.61 186.446 182.436 186.465 183.252 cv
186.25 183.264 186.036 183.27 185.82 183.291 cv
179.428 183.903 174.244 188.091 172.01 193.679 cv
175.394 189.535 180.347 186.678 186.083 186.129 cv
186.33 186.105 186.575 186.092 186.82 186.078 cv
186.847 186.191 186.862 186.308 186.891 186.421 cv
186.896 186.305 186.906 186.188 186.913 186.071 cv
192.362 185.768 197.466 187.626 201.382 190.912 cv
198.403 186.243 193.185 183.219 187.393 183.224 cv
189.267 176.479 195.95 172.042 203.031 173.151 cv
208.712 174.04 213.06 178.252 214.415 183.494 cv
214.697 176.496 209.688 170.223 202.604 169.114 cv
cp
154.542 159.587 mo
154.542 144.155 167.097 131.599 182.529 131.599 cv
187.394 131.599 191.97 132.85 195.959 135.042 cv
195.828 135.916 195.739 136.803 195.739 137.713 cv
195.739 138.603 195.825 139.472 195.95 140.328 cv
196.183 138.74 196.627 137.221 197.245 135.794 cv
197.839 134.42 198.606 133.141 199.507 131.969 cv
202.801 127.683 207.961 124.906 213.775 124.906 cv
219.381 124.906 224.385 127.483 227.689 131.51 cv
223.398 134.81 220.617 139.979 220.617 145.798 cv
220.617 146.779 220.717 147.736 220.868 148.675 cv
221.782 143.008 225.345 138.228 230.235 135.626 cv
230.674 135.392 231.123 135.178 231.582 134.98 cv
233.755 134.047 236.14 133.514 238.653 133.514 cv
241.267 133.514 243.743 134.088 245.985 135.093 cv
239.679 139.361 234.675 145.415 231.708 152.524 cv
236.189 145.875 242.658 140.678 250.25 137.769 cv
251.501 137.289 252.782 136.871 254.09 136.521 cv
257.325 135.654 260.719 135.183 264.223 135.183 cv
284.731 135.183 301.598 151.023 303.259 171.11 cv
303.348 172.184 303.405 173.268 303.405 174.365 cv
303.405 174.769 303.387 175.17 303.375 175.571 cv
303.225 180.458 302.185 185.124 300.398 189.407 cv
302.986 185.567 304.909 181.245 306.009 176.609 cv
312.05 179.526 316.238 185.697 316.238 192.843 cv
316.238 195.397 315.697 197.825 314.735 200.03 cv
317.142 196.964 318.591 193.112 318.591 188.921 cv
318.591 181.178 313.678 174.579 306.813 172.027 cv
306.98 170.563 307.066 169.074 307.066 167.566 cv
307.066 145.961 289.489 128.384 267.884 128.384 cv
261.707 128.384 255.863 129.823 250.662 132.38 cv
247.469 129.519 243.267 127.762 238.653 127.762 cv
235.533 127.762 232.597 128.559 230.035 129.959 cv
227.128 123.889 220.942 119.677 213.775 119.677 cv
206.456 119.677 200.155 124.066 197.33 130.343 cv
192.873 127.342 187.512 125.585 181.745 125.585 cv
166.313 125.585 153.758 138.141 153.758 153.573 cv
153.758 155.857 154.039 158.075 154.558 160.202 cv
154.553 159.997 154.542 159.793 154.542 159.587 cv
cp
322.925 217.632 mo
322.925 207.687 314.834 199.596 304.889 199.596 cv
298.291 199.596 292.525 203.169 289.381 208.471 cv
292.674 204.95 297.346 202.734 302.536 202.734 cv
312.481 202.734 320.572 210.825 320.572 220.77 cv
320.572 224.117 319.639 227.242 318.045 229.931 cv
321.062 226.706 322.925 222.387 322.925 217.632 cv
cp
257.001 169.467 mo
254.309 164.063 248.771 160.311 242.331 160.243 cv
235.91 160.176 230.313 163.793 227.5 169.113 cv
231.303 165.35 236.53 163.033 242.293 163.093 cv
248.078 163.154 253.274 165.599 257.001 169.467 cv
cp
136.373 196.517 mo
130.889 199.858 128.054 205.89 128.484 211.892 cv
129.719 206.687 132.927 201.954 137.849 198.956 cv
142.789 195.946 148.492 195.27 153.701 196.58 cv
148.558 193.42 141.873 193.167 136.373 196.517 cv
cp
169.079 138.373 mo
163.595 141.714 160.76 147.745 161.19 153.748 cv
162.425 148.542 165.634 143.81 170.555 140.811 cv
175.496 137.801 181.198 137.125 186.407 138.435 cv
181.264 135.275 174.579 135.022 169.079 138.373 cv
cp
281.796 143.089 mo
288.599 147.721 291.833 155.636 290.87 163.29 cv
289.645 156.536 285.848 150.255 279.737 146.093 cv
273.649 141.948 266.447 140.711 259.737 142.021 cv
266.496 138.353 275.012 138.469 281.796 143.089 cv
cp
1 .819608 .0627451 rgb
f
200.646 296.545 mo
193.217 296.545 186.716 292.55 183.141 286.604 cv
188.562 284.925 193.44 282.006 197.456 278.187 cv
199.134 278.986 200.924 279.615 202.819 280.024 cv
206.873 280.9 210.906 280.71 214.636 279.653 cv
215.213 282.431 216.234 285.048 217.645 287.411 cv
213.981 292.909 207.734 296.545 200.646 296.545 cv
cp
308.458 224.787 mo
310.36 229.388 311.416 234.424 311.416 239.703 cv
311.416 261.308 293.839 278.886 272.234 278.886 cv
269.485 278.886 266.803 278.596 264.213 278.054 cv
262.954 277.791 261.723 277.453 260.51 277.072 cv
252.451 274.535 245.506 269.469 240.617 262.799 cv
249.749 261.307 257.18 254.76 259.948 246.124 cv
254.252 253.256 245.488 257.83 235.651 257.83 cv
229.509 257.83 223.788 256.041 218.967 252.966 cv
226.144 252.398 232.934 249.074 237.77 243.59 cv
228.536 248.448 217.262 249.221 206.961 244.712 cv
198.613 241.058 192.378 234.581 188.878 226.893 cv
189.542 236.987 195.667 246.372 205.574 250.708 cv
209.258 252.32 213.098 253.064 216.875 253.05 cv
221.324 259.15 228.515 263.121 236.643 263.121 cv
237.796 263.121 238.925 263.025 240.035 262.871 cv
244.134 270.659 250.775 276.91 258.851 280.505 cv
254.487 288.018 246.356 293.084 237.06 293.084 cv
227.4 293.084 219.008 287.608 214.784 279.605 cv
220.8 277.858 226.009 273.843 229.187 268.329 cv
222.114 274.098 212.582 276.719 202.967 274.643 cv
195.174 272.96 188.704 268.49 184.368 262.506 cv
186.201 269.249 190.886 275.01 197.326 278.123 cv
191.718 280.858 185.432 282.41 178.784 282.41 cv
157.152 282.41 139.258 266.153 136.647 245.216 cv
136.25 247.365 136.032 249.577 136.032 251.839 cv
136.032 271.901 152.354 288.223 172.416 288.223 cv
175.856 288.223 179.182 287.732 182.338 286.835 cv
183.758 295.37 191.16 301.906 200.093 301.906 cv
208.778 301.906 216.024 295.726 217.727 287.537 cv
222.142 294.834 230.141 299.729 239.275 299.729 cv
250.508 299.729 260.045 292.335 263.282 282.16 cv
266.904 283.268 270.745 283.869 274.725 283.869 cv
296.331 283.869 313.908 266.292 313.908 244.687 cv
313.908 237.425 311.915 230.624 308.458 224.787 cv
cp
.772549 .145098 .0509804 rgb
f
155.622 240.926 mo
161.446 245.415 169.315 245.405 175.059 241.442 cv
169.083 242.905 162.522 241.741 157.27 237.693 cv
153.014 234.413 150.37 229.818 149.463 224.92 cv
148.404 230.79 150.572 237.033 155.622 240.926 cv
cp
f
265.345 234.295 mo
272.2 231.637 276.266 224.899 275.848 217.933 cv
274.007 223.803 269.614 228.814 263.432 231.212 cv
258.422 233.155 253.122 233.038 248.461 231.279 cv
252.936 235.224 259.399 236.601 265.345 234.295 cv
cp
f
302.498 249.825 mo
307.065 238.222 303.339 225.408 294.175 217.92 cv
299.376 226.965 300.573 238.202 296.455 248.666 cv
293.117 257.145 286.879 263.619 279.328 267.406 cv
289.39 266.363 298.538 259.888 302.498 249.825 cv
cp
f
339.17 276.25 mo
334.884 276.136 330.725 276.109 323.683 272.316 cv
329.765 276.356 326.228 280.853 325.054 281.937 cv
323.88 283.02 319.066 281.214 315.541 278.229 cv
320.622 283.992 323.265 289.547 321.41 292.855 cv
318.449 298.134 312.498 295.029 310.847 292.723 cv
314.654 299.742 316.245 305.387 316.449 308.31 cv
320.503 306.483 339.17 276.25 339.17 276.25 cv
cp
1 .494118 .0392157 rgb
f
327.4 322.734 mo
317.529 318.03 313.339 306.215 318.042 296.344 cv
322.745 286.473 334.56 282.284 344.431 286.987 cv
354.302 291.69 358.492 303.505 353.789 313.376 cv
349.086 323.247 337.271 327.437 327.4 322.734 cv
cp
f
350.725 313.618 mo
351.528 311.933 352.013 310.182 352.23 308.427 cv
352.116 308.702 352.016 308.98 351.886 309.252 cv
347.881 317.659 337.819 321.227 329.412 317.221 cv
322.69 314.018 319.075 306.943 319.939 299.938 cv
316.535 308.168 320.117 317.711 328.252 321.587 cv
336.658 325.592 346.72 322.024 350.725 313.618 cv
cp
.866667 .411765 .0352941 rgb
f
335.601 298.988 mo
329.584 296.121 327.03 288.919 329.897 282.902 cv
332.763 276.885 339.965 274.332 345.982 277.199 cv
351.999 280.066 354.553 287.268 351.686 293.284 cv
348.82 299.301 341.618 301.855 335.601 298.988 cv
cp
1 .494118 .0392157 rgb
f
330.648 287.785 mo
329.177 288.243 327.781 288.906 326.473 289.718 cv
331.925 287.886 338.106 288.322 343.452 291.469 cv
344.153 291.881 344.81 292.338 345.443 292.817 cv
349.832 295.751 352.579 300.418 353.22 305.446 cv
353.368 306.248 353.486 307.056 353.539 307.873 cv
354.85 300.178 351 292.222 343.614 288.702 cv
342.452 288.149 341.234 287.72 339.993 287.429 cv
336.912 286.704 333.777 286.846 330.874 287.709 cv
333.077 283.834 337.64 281.784 342.021 282.814 cv
342.725 282.979 343.418 283.223 344.078 283.538 cv
347.714 285.27 349.839 288.896 349.86 292.677 cv
349.896 292.606 349.937 292.54 349.972 292.468 cv
352.383 287.406 350.227 281.325 345.165 278.914 cv
344.505 278.599 343.812 278.355 343.108 278.19 cv
338.49 277.104 333.656 279.43 331.612 283.719 cv
330.995 285.013 330.688 286.394 330.648 287.785 cv
cp
.94902 .85098 .105882 rgb
f
310.847 292.723 mo
315.446 302.123 322.198 299.735 324.101 296.463 cv
326.003 293.192 324.021 286.86 318.94 281.098 cv
322.465 284.083 325.864 284.821 328.042 283.937 cv
331.185 282.661 329.762 276.625 323.683 272.316 cv
327.371 275.77 325.718 280.772 322.905 280.952 cv
321.378 281.05 319.066 281.214 315.541 278.229 cv
320.622 283.992 321.988 289.662 320.086 292.934 cv
318.183 296.206 312.498 295.029 310.847 292.723 cv
cp
.866667 .411765 .0352941 rgb
f
153.134 326.928 mo
160.595 327.213 166.413 333.492 166.128 340.953 cv
165.844 348.414 159.564 354.232 152.103 353.947 cv
144.642 353.663 138.824 347.384 139.109 339.922 cv
139.394 332.461 145.673 326.643 153.134 326.928 cv
cp
1 .533333 .109804 rgb
f
171.978 325.947 mo
181.602 326.314 189.106 334.413 188.739 344.037 cv
188.372 353.66 180.273 361.165 170.649 360.798 cv
161.025 360.431 153.521 352.332 153.888 342.708 cv
154.255 333.084 162.354 325.58 171.978 325.947 cv
cp
f
186.697 345.408 mo
185.902 347.972 184.46 350.3 182.438 352.174 cv
179.397 354.992 175.441 356.456 171.298 356.298 cv
169.878 356.245 168.48 356 167.143 355.571 cv
164.446 354.707 162.124 353.132 160.327 351.108 cv
164.619 351.49 168.776 349.288 170.851 345.486 cv
167.718 348.44 163.119 349.649 158.729 348.242 cv
154.338 346.835 151.298 343.178 150.466 338.954 cv
149.954 343.176 151.972 347.314 155.565 349.529 cv
154.7 349.7 153.812 349.784 152.908 349.749 cv
151.846 349.709 150.802 349.526 149.802 349.205 cv
144.867 347.624 141.558 342.898 141.756 337.713 cv
141.782 337.042 141.874 336.385 142.01 335.741 cv
141.423 337.067 141.082 338.503 141.025 339.995 cv
140.827 345.18 144.135 349.906 149.07 351.487 cv
150.071 351.808 151.115 351.991 152.176 352.032 cv
154.131 352.106 156.03 351.695 157.737 350.853 cv
159.607 354.243 162.71 356.919 166.566 358.155 cv
167.904 358.583 169.302 358.828 170.722 358.882 cv
174.865 359.04 178.821 357.576 181.862 354.758 cv
184.546 352.271 186.229 348.991 186.697 345.408 cv
cp
.866667 .443137 .0941176 rgb
f
143.21 330.683 mo
147.613 327.779 152.38 323.696 158.886 314.324 cv
154.164 322.343 159.317 322.263 161.335 323.982 cv
163.352 325.701 167.772 321.997 172.707 310.569 cv
168.684 322.822 170.868 324.66 173.458 325.837 cv
176.047 327.014 178.122 323.276 178.848 314.821 cv
180.595 325.407 184.776 330.143 187.706 337.667 cv
174.779 338.262 155.054 345.635 143.21 330.683 cv
cp
1 .533333 .109804 rgb
f
172.707 310.569 mo
167.772 321.997 154.164 322.343 158.886 314.324 cv
157.906 315.736 152.668 323.9 159.306 326.789 cv
163.191 328.479 165.812 326.459 169.011 319.788 cv
167.626 324.908 169.464 327.35 172.054 328.527 cv
174.503 329.641 181.433 330.935 179.32 317.253 cv
179.15 316.473 178.988 315.672 178.848 314.821 cv
178.122 323.276 168.684 322.822 172.707 310.569 cv
cp
.866667 .443137 .0941176 rgb
f
127.067 399.15 mo
117.148 393.836 li
113.137 404.349 li
115.126 393.274 li
103.888 392.709 li
115.036 391.178 li
112.101 380.315 li
117.002 390.444 li
126.427 384.296 li
118.307 392.087 li
127.067 399.15 li
cp
.772549 .145098 .0509804 rgb
f
49.8614 167.905 mo
39.9425 162.591 li
35.9317 173.104 li
37.9209 162.029 li
26.6822 161.463 li
37.8306 159.933 li
34.8955 149.07 li
39.7962 159.199 li
49.221 153.051 li
41.1015 160.842 li
49.8614 167.905 li
cp
1 .47451 0 rgb
f
431.422 199.624 mo
421.503 194.31 li
417.492 204.823 li
419.482 193.748 li
408.243 193.182 li
419.391 191.652 li
416.456 180.789 li
421.357 190.918 li
430.782 184.77 li
422.662 192.561 li
431.422 199.624 li
cp
f
129.951 59.1708 mo
120.278 53.988 li
116.367 64.2405 li
118.307 53.4401 li
107.348 52.8882 li
118.219 51.396 li
115.357 40.8025 li
120.136 50.6806 li
129.326 44.6853 li
121.408 52.2826 li
129.951 59.1708 li
cp
.94902 .858824 0 rgb
f
393.409 54.9325 mo
378.685 47.0438 li
372.732 62.6507 li
375.684 46.2099 li
359.002 45.3706 li
375.55 43.0983 li
371.193 26.9727 li
378.468 42.0091 li
392.458 32.8823 li
380.406 44.4476 li
393.409 54.9325 li
cp
f
163.204 369.787 mo
163.204 370.673 162.464 371.392 161.551 371.392 cv
160.638 371.392 159.898 370.673 159.898 369.787 cv
159.898 368.9 160.638 368.182 161.551 368.182 cv
162.464 368.182 163.204 368.9 163.204 369.787 cv
cp
f
239.684 428.42 mo
239.684 429.307 238.944 430.025 238.031 430.025 cv
237.118 430.025 236.377 429.307 236.377 428.42 cv
236.377 427.534 237.118 426.816 238.031 426.816 cv
238.944 426.816 239.684 427.534 239.684 428.42 cv
cp
f
383.974 300.301 mo
383.974 301.187 383.234 301.905 382.321 301.905 cv
381.408 301.905 380.668 301.187 380.668 300.301 cv
380.668 299.414 381.408 298.696 382.321 298.696 cv
383.234 298.696 383.974 299.414 383.974 300.301 cv
cp
f
409.474 160.986 mo
409.474 161.872 408.734 162.591 407.82 162.591 cv
406.907 162.591 406.167 161.872 406.167 160.986 cv
406.167 160.1 406.907 159.381 407.82 159.381 cv
408.734 159.381 409.474 160.1 409.474 160.986 cv
cp
f
351.011 20.5272 mo
351.011 21.4136 350.271 22.1321 349.358 22.1321 cv
348.445 22.1321 347.705 21.4136 347.705 20.5272 cv
347.705 19.6409 348.445 18.9224 349.358 18.9224 cv
350.271 18.9224 351.011 19.6409 351.011 20.5272 cv
cp
f
214.184 37.5806 mo
214.184 38.4669 213.444 39.1854 212.531 39.1854 cv
211.618 39.1854 210.878 38.4669 210.878 37.5806 cv
210.878 36.6943 211.618 35.9758 212.531 35.9758 cv
213.444 35.9758 214.184 36.6943 214.184 37.5806 cv
cp
f
35.0653 230.382 mo
35.0653 231.269 34.3251 231.987 33.4121 231.987 cv
32.499 231.987 31.7589 231.269 31.7589 230.382 cv
31.7589 229.496 32.499 228.777 33.4121 228.777 cv
34.3251 228.777 35.0653 229.496 35.0653 230.382 cv
cp
f
81.7109 269.204 mo
81.7109 270.09 80.9707 270.808 80.0577 270.808 cv
79.1446 270.808 78.4044 270.09 78.4044 269.204 cv
78.4044 268.317 79.1446 267.599 80.0577 267.599 cv
80.9707 267.599 81.7109 268.317 81.7109 269.204 cv
cp
f
304.366 324.556 mo
304.366 325.443 303.626 326.161 302.712 326.161 cv
301.799 326.161 301.059 325.443 301.059 324.556 cv
301.059 323.67 301.799 322.951 302.712 322.951 cv
303.626 322.951 304.366 323.67 304.366 324.556 cv
cp
f
317.426 127.401 mo
317.426 128.287 316.686 129.006 315.773 129.006 cv
314.86 129.006 314.12 128.287 314.12 127.401 cv
314.12 126.515 314.86 125.796 315.773 125.796 cv
316.686 125.796 317.426 126.515 317.426 127.401 cv
cp
f
184.953 93.8163 mo
184.953 94.7026 184.213 95.4211 183.3 95.4211 cv
182.387 95.4211 181.647 94.7026 181.647 93.8163 cv
181.647 92.9299 182.387 92.2114 183.3 92.2114 cv
184.213 92.2114 184.953 92.9299 184.953 93.8163 cv
cp
f
149.502 115.323 mo
149.502 116.21 148.762 116.928 147.849 116.928 cv
146.936 116.928 146.196 116.21 146.196 115.323 cv
146.196 114.437 146.936 113.718 147.849 113.718 cv
148.762 113.718 149.502 114.437 149.502 115.323 cv
cp
f
99.1252 193.688 mo
99.1252 194.574 98.3851 195.293 97.472 195.293 cv
96.559 195.293 95.8188 194.574 95.8188 193.688 cv
95.8188 192.801 96.559 192.083 97.472 192.083 cv
98.3851 192.083 99.1252 192.801 99.1252 193.688 cv
cp
f
216.05 375.294 mo
216.05 376.181 215.31 376.899 214.397 376.899 cv
213.484 376.899 212.744 376.181 212.744 375.294 cv
212.744 374.408 213.484 373.69 214.397 373.69 cv
215.31 373.69 216.05 374.408 216.05 375.294 cv
cp
f
290.683 372.807 mo
290.683 373.693 289.943 374.412 289.03 374.412 cv
288.117 374.412 287.377 373.693 287.377 372.807 cv
287.377 371.92 288.117 371.202 289.03 371.202 cv
289.943 371.202 290.683 371.92 290.683 372.807 cv
cp
f
272.025 392.448 mo
272.025 393.334 271.285 394.053 270.372 394.053 cv
269.459 394.053 268.718 393.334 268.718 392.448 cv
268.718 391.561 269.459 390.843 270.372 390.843 cv
271.285 390.843 272.025 391.561 272.025 392.448 cv
cp
f
96.2281 357.88 mo
96.2281 358.766 95.4879 359.485 94.5749 359.485 cv
93.6618 359.485 92.9217 358.766 92.9217 357.88 cv
92.9217 356.994 93.6618 356.275 94.5749 356.275 cv
95.4879 356.275 96.2281 356.994 96.2281 357.88 cv
cp
f
48.748 353.788 mo
48.748 354.674 48.0078 355.392 47.0948 355.392 cv
46.1817 355.392 45.4416 354.674 45.4416 353.788 cv
45.4416 352.901 46.1817 352.183 47.0948 352.183 cv
48.0078 352.183 48.748 352.901 48.748 353.788 cv
cp
f
79.8451 251.528 mo
79.8451 252.415 79.1049 253.133 78.1918 253.133 cv
77.2788 253.133 76.5386 252.415 76.5386 251.528 cv
76.5386 250.642 77.2788 249.923 78.1918 249.923 cv
79.1049 249.923 79.8451 250.642 79.8451 251.528 cv
cp
f
151.99 206.749 mo
151.99 207.635 151.25 208.353 150.337 208.353 cv
149.424 208.353 148.684 207.635 148.684 206.749 cv
148.684 205.862 149.424 205.144 150.337 205.144 cv
151.25 205.144 151.99 205.862 151.99 206.749 cv
cp
f
160.075 264.228 mo
160.075 265.114 159.335 265.833 158.422 265.833 cv
157.509 265.833 156.769 265.114 156.769 264.228 cv
156.769 263.342 157.509 262.623 158.422 262.623 cv
159.335 262.623 160.075 263.342 160.075 264.228 cv
cp
f
239.684 211.363 mo
239.684 212.249 238.944 212.968 238.031 212.968 cv
237.118 212.968 235.741 210.746 236.377 211.363 cv
238.031 212.968 237.118 209.758 238.031 209.758 cv
238.944 209.758 239.684 210.477 239.684 211.363 cv
cp
f
293.171 246.192 mo
293.171 247.078 292.431 247.797 291.518 247.797 cv
290.605 247.797 289.864 247.078 289.864 246.192 cv
289.864 245.305 290.605 244.587 291.518 244.587 cv
292.431 244.587 293.171 245.305 293.171 246.192 cv
cp
f
270.781 274.54 mo
270.781 275.426 270.041 276.145 269.128 276.145 cv
268.215 276.145 267.474 275.426 267.474 274.54 cv
267.474 273.654 268.215 272.935 269.128 272.935 cv
270.041 272.935 270.781 273.654 270.781 274.54 cv
cp
f
375.889 265.833 mo
375.889 266.719 375.149 267.438 374.236 267.438 cv
373.323 267.438 372.582 266.719 372.582 265.833 cv
372.582 264.947 373.323 264.228 374.236 264.228 cv
375.149 264.228 375.889 264.947 375.889 265.833 cv
cp
f
405.12 243.443 mo
405.12 244.329 404.38 245.048 403.467 245.048 cv
402.554 245.048 401.814 244.329 401.814 243.443 cv
401.814 242.557 402.554 241.838 403.467 241.838 cv
404.38 241.838 405.12 242.557 405.12 243.443 cv
cp
.772549 .145098 .0509804 rgb
f
68.0282 357.258 mo
68.0282 358.145 67.288 358.863 66.375 358.863 cv
65.4619 358.863 64.7217 358.145 64.7217 357.258 cv
64.7217 356.372 65.4619 355.653 66.375 355.653 cv
67.288 355.653 68.0282 356.372 68.0282 357.258 cv
cp
f
180.599 346.324 mo
180.599 347.211 179.859 347.929 178.946 347.929 cv
178.033 347.929 177.293 347.211 177.293 346.324 cv
177.293 345.438 178.033 344.719 178.946 344.719 cv
179.859 344.719 180.599 345.438 180.599 346.324 cv
cp
f
323.646 379.648 mo
323.646 380.534 322.906 381.253 321.993 381.253 cv
321.08 381.253 320.339 380.534 320.339 379.648 cv
320.339 378.762 321.08 378.043 321.993 378.043 cv
322.906 378.043 323.646 378.762 323.646 379.648 cv
cp
f
342.926 306.62 mo
342.926 307.506 342.186 308.225 341.273 308.225 cv
340.36 308.225 339.62 307.506 339.62 306.62 cv
339.62 305.734 340.36 305.015 341.273 305.015 cv
342.186 305.015 342.926 305.734 342.926 306.62 cv
cp
f
378.999 92.9333 mo
378.999 93.8197 378.258 94.5382 377.345 94.5382 cv
376.432 94.5382 375.692 93.8197 375.692 92.9333 cv
375.692 92.047 376.432 91.3285 377.345 91.3285 cv
378.258 91.3285 378.999 92.047 378.999 92.9333 cv
cp
f
92.9058 121.543 mo
92.9058 122.429 92.1656 123.147 91.2526 123.147 cv
90.3396 123.147 89.5994 122.429 89.5994 121.543 cv
89.5994 120.656 90.3396 119.938 91.2526 119.938 cv
92.1656 119.938 92.9058 120.656 92.9058 121.543 cv
cp
f
169.405 54.995 mo
169.405 55.8813 168.664 56.5998 167.751 56.5998 cv
166.838 56.5998 166.098 55.8813 166.098 54.995 cv
166.098 54.1086 166.838 53.3901 167.751 53.3901 cv
168.664 53.3901 169.405 54.1086 169.405 54.995 cv
cp
f
33.1995 190.578 mo
33.1995 191.464 32.4593 192.183 31.5463 192.183 cv
30.6332 192.183 29.8931 191.464 29.8931 190.578 cv
29.8931 189.692 30.6332 188.973 31.5463 188.973 cv
32.4593 188.973 33.1995 189.692 33.1995 190.578 cv
cp
f
418.181 104.128 mo
418.181 105.015 417.441 105.733 416.528 105.733 cv
415.615 105.733 414.874 105.015 414.874 104.128 cv
414.874 103.242 415.615 102.523 416.528 102.523 cv
417.441 102.523 418.181 103.242 418.181 104.128 cv
cp
f
350.389 346.946 mo
350.389 347.832 349.649 348.551 348.736 348.551 cv
347.823 348.551 347.083 347.832 347.083 346.946 cv
347.083 346.06 347.823 345.341 348.736 345.341 cv
349.649 345.341 350.389 346.06 350.389 346.946 cv
cp
f
398.279 222.297 mo
398.279 223.183 397.539 223.902 396.626 223.902 cv
395.713 223.902 394.972 223.183 394.972 222.297 cv
394.972 221.411 395.713 220.692 396.626 220.692 cv
397.539 220.692 398.279 221.411 398.279 222.297 cv
cp
.94902 .858824 0 rgb
f
391.437 142.067 mo
391.437 142.953 390.697 143.672 389.784 143.672 cv
388.871 143.672 388.131 142.953 388.131 142.067 cv
388.131 141.18 388.871 140.462 389.784 140.462 cv
390.697 140.462 391.437 141.18 391.437 142.067 cv
cp
f
387.706 105.011 mo
387.706 105.898 386.966 106.616 386.053 106.616 cv
385.14 106.616 384.399 105.898 384.399 105.011 cv
384.399 104.125 385.14 103.406 386.053 103.406 cv
386.966 103.406 387.706 104.125 387.706 105.011 cv
cp
f
266.427 94.4382 mo
266.427 95.3245 265.687 96.043 264.774 96.043 cv
263.861 96.043 263.121 95.3245 263.121 94.4382 cv
263.121 93.5519 263.861 92.8334 264.774 92.8334 cv
265.687 92.8334 266.427 93.5519 266.427 94.4382 cv
cp
f
123.168 88.5798 mo
123.168 89.4661 122.428 90.1846 121.515 90.1846 cv
120.602 90.1846 119.862 89.4661 119.862 88.5798 cv
119.862 87.6934 120.602 86.9749 121.515 86.9749 cv
122.428 86.9749 123.168 87.6934 123.168 88.5798 cv
cp
f
63.462 150.774 mo
63.462 151.66 62.7218 152.379 61.8088 152.379 cv
60.8957 152.379 60.1556 151.66 60.1556 150.774 cv
60.1556 149.887 60.8957 149.169 61.8088 149.169 cv
62.7218 149.169 63.462 149.887 63.462 150.774 cv
cp
f
270.781 63.7021 mo
270.781 64.5885 270.041 65.307 269.128 65.307 cv
268.215 65.307 267.474 64.5885 267.474 63.7021 cv
267.474 62.8158 268.215 62.0973 269.128 62.0973 cv
270.041 62.0973 270.781 62.8158 270.781 63.7021 cv
cp
1 .47451 0 rgb
f
382.321 173.164 mo
382.321 174.05 381.581 174.769 380.668 174.769 cv
379.755 174.769 379.014 174.05 379.014 173.164 cv
379.014 172.277 379.755 171.559 380.668 171.559 cv
381.581 171.559 382.321 172.277 382.321 173.164 cv
cp
f
397.247 247.175 mo
397.247 248.061 396.507 248.779 395.594 248.779 cv
394.681 248.779 393.941 248.061 393.941 247.175 cv
393.941 246.288 394.681 245.57 395.594 245.57 cv
396.507 245.57 397.247 246.288 397.247 247.175 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (\700\755\762\756\755) ()
%%Title: (1505.m00.i125.n025.S.c12.140130823 Comic book explosion boom.eps)
%%CreationDate: 5/13/2015 7:02 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6BjVOuniqLd5+g/H%rjm4+\qb_4ThVc64cRS^jX%\"Gh^VB(7pR#QND)f=.b-RBVA'](@9,QZF/mFF&84]rJ,KAnG'^h0QV8
%5?qq#B-H;GjuqVDi5bZf^Lh)L<jsUHTfqt+;YQtbmqfBMV+SA5g8Hl4m=idLY@9ZdU3K5d'Jgg\[9DUobY#!>3i6P1)ua0;>,r>U
%Xcm3A'4`,$FSGRh2f3ku#/Fkh2gZJke?i0=FD)7C2UB"K^65!!$c@J#T0=3r4rZ`]CckG,4o4Pq2Fbf,+$U6!J%:>CEZ9R']2NDZ
%>K'@F;5]6d15c(#V(XY#b!E::lc=B-rEf-$F"`.h*b8S7dF.0T!a:9:ruCp.r2%8:6i>iS_Z0Mhc@3WCST-HWbd4^B`uJ8D"Mb(e
%XmH5UbQMUIj[B6^]9SRlXk9U,)R]:FIV)o8-3&c_'7RIO][>CTaNOm\T8eG]YPCs/i@irp:BHfRe]M5,RAZ<Z\^IdNcF#\pec-7O
%/_Se=m;B&SH;h"j#])7m,`$]m-s(/jc2QaW>*74(fHpQ5HgDMPLQr@sBqs5_*YpN)'7]b^Ha6fP<<5N<43=O8V7t]/b6skBJTeA;
%i1#\R;35p+2rih'2ku<JAKjI=79iAk<dk+DnIufNUW)gAi+e/Up/S/>=KO7#LP4eT.ne(OX_PCBb!p#1q1j0Y%21s'r*pO<@-D\^
%olqiVn#a;p0SP^=Z%K%-lK-R9$1Q?^T.:X["E@&9EG3,Ss2!U?&Da5>$TIFcCsW:73X5TX^L#',iSIV;94+j2)VsOFrLi]LJ'I,u
%NVuK3D5G`rZj=S2bcC^2oZ+Yhlt9DccYhZgG!5[.Pl1<:Zk75f`1*p5nU3m@n;R<4ocNhq[nlD*oJ)*?m`h(M<h&h9=WG8Z<QW=k
%oIU#6^CTfqc1AmP,c(8=I!-M^lbU/kdpJTJYS#3!JpmqWIAS+HARqmMqThd9dDYtQa%WaEcFb[9RVC?Y<@cXYXUK^L&!q=#*[Wic
%f-2Sn/7UGe%/b[3(ca`qh5$GtX$:;U7A>lCb9jB*'$g7qmaKq-V&^1UV4+F:3?g%RWL)B>*'hZfK+&Upp>c-8(s#Zj<jqVcAA;!B
%[SM-Rb-!#sHX;<UVtWG\k&G]_QD*LeZUuR\-VB]EchR9%AbmsuUMB%E9mX7mGA&_EKr'H@Vp_T[WXGJ(h=a]X\'_/QF'rdm0*)n.
%Q2kDC0NE]+IA[T6_jDPM+Ue.]Z%HBGhn",F-*P^^!jsS@#FqsRY(!c\X&T[7`TC%*oQrNi'Cn&I\Sa`dH?S\\9N&,X*kJliesf9>
%Q'bKFmo%+=Srd4T[uh[uUWAI*J`F`?b(@RsIM3):/PpsG3]#m*>,W0!RC.(#m$A)ZiQsbMIhb&AUWd=m^K#)M/!hY*&G8>s:54"*
%Vd&Of`%4i>@.@^fDF#K#_b3h!V*a59[Z>tIM1PQInFt#:9U_%6o9UA]b)n?$hQE&<fR_fHYkL/a5_$IsZ2'Q1!re^nQ=/\g>JDfd
%C,%OAT9EHL^76R<[]95\:5+XY3U2uI[>LmZP`DcOEiW+$*]in3UYb6bM17S$@(=UNZc[9"mU[I-d%L'L_+m4Q[BAoi=1-gD\tE9@
%GTsh7!Ogn@=E!?#;E[/-UtADsEE(]7D=!B1G%(J&V!L*glLI)=b:3.?:8?NI)FXNO`?,"7hHTc?@LKq?[tP$u\;?$ojZ>M2;9#;i
%'RLe_4dU%:j!Gs3h:@%AI%sU$Ep1SCQ\)%mpdd<=0Af:5Hh+2d.K6EE6#s:&W:g?>?,!FAV;88M&cH^iOi`ojj'TNkrF3B:BN9M'
%M)`sTRT'/T[CLTnVc+nrn+$pr\K@QTC$9N/G=l:bd14[1*F(3B/%_,SNPr\hj'do"WER&-PRNoskVXhngM(b6V96AoNG3R#C."cN
%c\2a#Cnf=Y[#3paV:\DTl\P@J[;jW2[+V]W_(L4N'l9sV^4;"7b!BWZlIh0QAgZB@o;8,8e?bWjG5j'8*OL^b\("_BWpT-3gSKuS
%;r;KB^0QTrhUJs&\oq$(DX,rHg;MLKS%<eCRe<3[dTt:<H97CB:%TI.;fjKdaGZ7?oU\4nG&0X$ZIoh0JjGp#'%fD"j.'q#a/8o8
%X)cY`RDOQR^"1V_Uc(8m[joX+1!Nj"Z!=FUQS?C=qHZUhgrbn7CAhTn0OW!]/&b8tRmtRIqMo<+Q\jB@b2SgrneNjugL1%Ym8,el
%p/XqBYOX(r<H$C9n5ZI;4mCsD5oL.X3fa\4)7?E6N:Q4?-UU+VoU1.],-h1=rURucWZpjjWdV=F[;$T_QAW'_mTlX@;SVP=U&c]F
%CVOnWb'UDl7^\LjmB>NQ'\d>%g7;\'AZ/(ENmrb3euL0tUqmmoq^,#_VOXjfXR\NY<2#[ipX)&%\Q\U'GR[pXrRutJEtT^fl*bXJ
%heSJHMtLPgh6%OZ.i7Yh]OemD"(bsaqFaCfj3I@J1?(6U%@,pLhlH06Ep=ahZcNMaNgg_R&Igfs_t_7sjSKWWcf9rW3Nr`G6>nHp
%*o&T!E5rn.(S*r)m(o/.$ZbTVimhT.f^$OdX4fQpWH?Qj//,'/;ojRjZV#6N%jJ04gT*$e-uo*XdQ4H0R%ld[PuUN(OJca4s3!4Z
%'R-CNB?8OXjRYVl4[Yg4+]$FGVe='aEJD^"!)AZaZ^B/tR$_r)S/N2B`/CPV`m]"hl++(#I<ocn#skl]\a_!Ff(@bmc^n+#Ws8mc
%G%J'Y-\5Jt6Xsc#(n&@,6GdkL#NSAAOL@qp'F].,e\6KPH0WR3=2Pbdl7cR3S`1@<48lt94GgEX0.l#bHB5W')g@9Pg%u[:V:7U'
%h0NejeA3t.2N<fXdYUbnY-('Xbb'X3`]-X=`ms'WX&>oMP00pY'$F8c)iHq]NEW0bfW(/P)m*TJ_Lp!Fr+m99S&We&\^6N[57:?l
%cmq!M.qS?(d<B-$.87"Eid\!Vh,G-.H9Fb<VTDn"&@%Y+FP,B@>R3D0S(>rS8?u=K26'!#r>LGjY"A*`Dq?-7Z1Z.T+,oFE49\O6
%SR3NOHhNTLq)mn#\FuOAGnsK8@/l@'i+3gOR0I!#\@$&/AK#e2IGi)!=X<KGUG*[;R0HupJX:*/AK#f]#%%:(i+7!G`V%@E)4LWS
%NcfRn3eDJ0Y2rt=-8G3+Q>9R,ifAkR7Oa`P]3n'r+p6k3YTcfHLN+tLOTl?FJed=1Lc569n[d7g^UDZBC=UU1Z$KikIB":-=L!gs
%Eh$0OROZ>i\QNFG+OeNiWGW\5Ni#gHY#c@9/)YPR_.d)hBk/Q`J"9p8RVFVlp4?BEg%>GO?7M&";lE(F#P=kU8V&A@TCTAe7Qi6Y
%(992,=cJVEH"pYkK=A[ogVi`4Y`iDr/B,e2-b/BZong+Ob?eEtlpkc):41`Q'N1To7V.iTW3aq=+cXJkO&0CnP=l4AK7e?D")_dP
%aslp#-:W+!k,sd7H8TM'j"7\LC5k\cP-c&!CW4`l@Rce)c!m[+q6f-k;qX+EdbW'/I\WXLPe#uk_ac0M1F[->!9$Wt(]>@g4TWS0
%C$BEgQ0G^"5J,Lt62RT_DZ$ng]k#m*cPr8&oGbEskC4MK\lh"tpWo``rPht&:.tH^2Ou[Bg*!n[Q_iIO8mp("9E""^d#?D#)OoJZ
%f:h!FeD?TeHfpi"#1p6=:(!kek]/adW$h4eZ/!XS.%1R>BPJ4Zp4Z1YOC+eoV`2\p&c<4Y6.969haPf^#5NLKP+1;N+-0'8di7B.
%Wu%u</\.j$*&$D5]g4h'b&M`[Hp!YRoEP+j2i]POrm0lL8W4el]d2%u9K5Y_?L9*8\7+OG#fXp%`ueU+6rLrhX'"X$CG-XW1leh'
%G:?hiL7a,!pm<T31rkmSm`?urim1S(h34C"[Ahu"CVO)SeC2&9@q#qnZVHBV`r0AY;J9'ZFD:>\DBPP95H;EI)`sU*Vf^>NkeIWW
%o\6M!;A%qSmh)U`98R]%-2C,pL.bCq?m9-kauK+0o02hN0&Q'7]^4W-,&ut7eiGtM*g1P&d@OXGd<[O+f>_#g>jijYf>[%Po/GYu
%a[6_K,@g^6'Zl_<@BPW=Q&IpDAK&[6?N#rQ_iBoW-b.79ha,QkS<[?q>T8#"\onC'3(a1i_*PS[_I16E#dS0I+AJRjI5S#DH`<+^
%:5[eZPK$$)Dbsdg%0Tj]Io'hoWiZlQ5K4/MS`5):lqTrj;J/lIb4(/CV@>a"oH(7o.<OmPm>2N%f87SS-KAX>4.33Ha_]I;VQRZf
%>8_-q#eN(+'"lsKf%UFDhS:h"1k4Tp#@ekK\=/sHp1EKq%"&?2NRj8aL-Eo#%]?u$C:1$ro69GARUZ)*;Cqjp$Ehq&PP>;Eb1IO%
%GkV(tGWAP,@rUel]/+li9*ueI_p%#dDgl9R1u\2<@HJ((h+)PB0?pKB1spM\U@6`4iH;>Lg8^Z"I\m\OUuF#4m8%H5g6cs@6*#!g
%AgcANF?;3+P].k,$>tf?(Tg<9<_S^n>V)5BSa(oN3)FIof6)1tQ#buZ>#/.^P9<[NG4K@-@?Z+0[C%hp.Z(TYp6WFObAfJnIoO&P
%0@E\=9ZL*\.ut<GogV(RCR%NJPA[Li-E]2PGuWOu<U5oZML)M'@]f9sOX:L!kW5_<'l/:6J#+8LZ=Q,:<_BDoHDWM]r_+0)=Ke<l
%,-='GLmdmn>1]lA@k+O*gqE,?H$V5+LCDYYl/e/HTi6qPQfH+WpscgGh*B0Lb<6q#5Biqki6$Dkn`)WV.IN1#G6dbiDujg?%!Uf4
%bULm:@@g-N=C69D9*'VncV8]Q@\*ZP)+Sp'E9+OUpNsPs;1ZI]6S+N)"Kc.Dg.`53O#rBE(qsn,A]rUIiK+@)n6\"Uc(db1EL>aI
%Be&q-]As?sOtQtEVNPjIq50<nr$A!+S=.QWjf`DZeU*Hq^JWC-]$23pd_0h&f5XdE&ZnITaOcT`B9Lui(N!a-SiF^Z(WP3&P8#nB
%)1D*;%5-+/>T%+hPuO5DP:Z?A@Z?(Uq5Hq>)q)EmF4)[G9`-L<lVM^RboXm<kgVJ8Ir2qqqt9"B#qdtjpm1&rPV7Z,GCHB8_mT+U
%(!U%9=*@paOaspV9ODG'K'9)8Z^q_`K:FRjhrQQgD[N08GD*]*T5#2&mK'A1aS<G4n=R!@[Mm]\>H=YnOoJ+;NkJ#'mHR=A;&a/4
%nn><:8k`U5RFoFLKq*W4&!QKLcKk$VcKfYT5(+[=s'=_GM,*P?,/)U7/CCt9AGRXu5IcSb51"5m3OsV',gufl.=dZB>3@_BA)sNN
%1f\$:p%pRGA"'Ff7h#1WHblkkHhM)YAN)Ve_73q9%gK0`#:WSYD%_6(lZIEh]nU_i#6!cC>`3Vjq&Fhj1lZo]8t&JM:J$sD1re(k
%8o[dP)UTD4Y;;/ON27sC?A"&'RQX=h)Ir+):)_GS,9#$e`jfGh)UXpA1aXNCiEW::7]O^,?:9F(/YWl3P0^ksO)bASe4DFXG?9S>
%9igN>a#\Zf!K(Te@pJE)c=J<MPA_2pV_/-GDt%c>ga;Hc=?t:l\nUJ@S`tL+rond77VP4chlC_9g)/qJM0.`cliTE"2_.T#]rAd@
%J'HkD@0oX+^%'aleDHaCJ+";ibW/,cn^QS<[E"U88Q1C_lL7Lg^8]"/FnhgDhe=0(>pkEr3gQ90V:7Vt4T+n8S%airYJWfeq<O-W
%S;Qg5?JaaiGq,<Cd_LOLCZi9>/cY&om>Rpfd5>rFdh(2NIT+jjZ:(nkk+emm)`:nqL"@^cjfag98eW#.$EsJh[='(`OB_mU[@b>9
%S/hP-c-Gr0)17$C]lFRCd8Eim\FY$(Ck@L*$f"Nf"AapQEmg?Ie!%S@-\5c#Kp/6U-N#hZ`>+eag37"cpgmQALhck6A$:UOgeU4:
%';K0fChE%[S8p%gCK?LRom3IC;lNbhl/F:-*uWW.[Sr]p?%%38*uV>la]I6A>-V$eWRO!_MTpuW3@@660#^]B7!Laf-N5Z>k+`ji
%Gkm*i@i?REmPrc1EU7gIMO<,Ykbo2bR1tR*'lTan0hb,s[sUj?o$9lYpm$`V`h)Kp7!0i3l[SM[QUskH3G;DBs%O(a4fHqHkq[Es
%UI/]%d;dNJS>=gCG8o'r;UB!QOiFhFN,B0.$<u5Nn"a&<=$+s)Bl)=Kf2:obL#tsE/Y;kdDrU?d%JCk]q-@N!-]^pL<()sWUY82N
%;,9Q.V,I&`4!^)#!'uIeUY8bN>-AW=<"getCS_i,1rZj8>t=#^VBEGJb$cdsaS$S'<f4<"MSE&*LTI+CZ'Ea4P+Eok/;j,c8Lc?\
%qbo#T"pJ/mY=1=tCZ*9uY#?Z>Ra"MupgT\K1/@Am<0T9.]WP-8O!cOpV0'CK;5RpG-8QGa%2houlC%-HPSC"VK]Jl',-(1Z7Ca2V
%ZZMaY;:98mRYrrG7JU;(RqXLtR/&e0,bSDg>a/2#EU7htFim-EZ^FCiW2I0SB.WARa@/Zh@q3jXf-qL^c"8;Vl[S(Hbp;H$Ur)4.
%\8.>=SEq&)V98:r@UemXDG1Narobh$\UnTseW;<E\\=;"kGigi:V?sJ&iEj](uV4>rqV1";]No..]nUtd=bS>]jfZ_WM'-$JhG$C
%euu]Y9*'XDTUQ;"WLtJ%2j;umcJDa<g_4qfk+cYZAYZt.UNC1Bq0C`/K#HI*2uim/bN@]2-Bdh<Xj0])=09mt4?]l,ri5Qs5h>;"
%cUO>K`Xahs:#OG)%tDq:I1GHKc_8ZKrQoHrI%d)Un")8J;a"jG._VOGbU`T)*rt66pI2H*dm)M.14_>$qI"\&+5G4%5(,,&jSKO;
%:p/20>*N':^b+:7U<NKSL/E-XpV64L1]$a7gA]5C-hAPRl&1`Ss-paX#)6jS1+dIG8DjI`P3@]%`WSOZL[8'H<p=]UZFR)cm"W<L
%'lPE+6C0nr>&3sG3@aOb8c`2!"J22#fQmZnUZ?V-=3i8(@Y=.L.i:kTd(fUg<B:ZQZ_*3jG:,Kki)Rb0ru!:sFDYR\^f&5ASmh:(
%+dIL?d*M;Rb&Qdp>:Y,Tp!@_:*n[R&4+DnNcdIg^oJ[YOKE?Y6oBTr%;8Z61?W(!rC;"9b]=!$]eAV`.^=XUec0RTP)o.d7F$TOt
%6UET"oC^'hSiZVar;UN!h_`MFl<n4BW'['.S%Va=n,4fGg5D;t<U,Mr0"$%PX(`+D3Urb7Fdn3`eJb:Eb,&,oY9`Ns2\m@fYAtNT
%bE'<70@A!=V3C%B)m:[CrHAmn56o>-MeQcV*@Rr,r=g-==@O3&O.6ca/ef(MVABX(4!"NcI?qJ3:?,jn`8;X_d=l`Ujt(U&nR6`9
%rEo'=cK1BUrn$JH?EDpGphL<%HNGI<]2gLh+#33Z:?LMYV-"\Bj&Br2i\gAcdkhq(9D?RU?:<eL9r$V#jZC(2O\04-PPr_'6.Vku
%04)Gt1"d0GR[$?PfREN5*AT*&.gMVHX_N_Tlb&Uk%ulSI^k,FXao&HBnLu(VYDpL^:+DfDR4PDrYaFVr0BQ<gL.>.h>b^tcoNA.n
%.V6udgVi$ap2jtLR+mEP`E$Wd;/DLR-"M:5FQTf-l##P1cE3]$)u./5?eeXmpA8W%(\Tr0]]d^V($k7!Z%_Ln[('j2e#r[/okkDK
%Se3`\j4HlFc"]/f9=BZ]Lf`U@0gqMMEk)]l&KiI?p@2jjdV^s(Vu%3EeV(JugW8HeSOR5'f^;^Br=/G2k;JRI`0edhf,LRH7^k_b
%BQT_VqaQucYutcQBXk9<S<eK[Gh$s>ohPiU'oj*+7H,'OSYRJF\=q[C*!cLEMtN^]p.g,/C1+;NX\-4RqH:r,<rURiXHfiWidS:9
%mDLK-d3j1T!a^"29`e-":^06u]0[J(-K(TqJVRQ2g..Jm1Ag<)V-NDZ,ej);?qamB0:kaq8%4m8&9'^r3['/8dE*Z.-E9kFB-5n[
%edoC3_b+OAdHoiFO&ru#C[;jQgQcB[efI(rK&=%G#:17:nE\n"1\p-8K6L-2m8RgrM]H!^Atr>,@2EeKE5(c*oqq[f=r[9g^<,hf
%iM0iHG_]^GQ!9MS]3-SV5h%hLq]>3=m6@/UHlLKO_JZ#bP5KsV5n>QdHDd2TN\%Wb+[%4#Oa%A4H8=k_X)ZqDg!1nW4%->.odDKZ
%A<W?SNcQ.nDQO[ar[mMg0L4NeP!G[991X<qFghY9cYQX2<bc7MWR?,T,]k;3^JR0:q($9P,k7M^[`RlXRn]X/G37UXQ%[&UT9WFj
%nbc$fe;P9Q&O14P<(jW6P6;'+)?1kJE_-(g+#/2;1@RhmR<8EU?i.tW)\i+&Y9bdSAZ=',=3B]fFlqZ+7VD5f(iGg"B[-sfNVn&a
%ER)HbQp0lkEXteG\a3Z4>P;N6P%;%FVj8o9%Z9(GVqEVn7ad\*#J?Kh"e?]3ia2ciSs^J68O(rYoMd`sk=pr=eJ"*4=YXQ!^5Moj
%Hf5&uhf<s;)7l*cg$kgH!9%0bogc-H!(b_JdqB6-'Dbio?&GH=c=]AR$?,;hP+(G,o&a9V`g_AO\"A&3Dald,BB8V3qQ6T(SD3'O
%YBcXEAAT$#6:M'!Goh*I2n$(g=^]?Hh])GqB((065?p/fHBp)Kl='XU/TUBKNItuJP,;`o]jL/s'UqJ#!keh)F*>_a@YdLE6rjQT
%g9Bt;lcFZR4h"'[r9`*nV;l!T>NK[r<@-UR)0jO"J;!#]U\3NY2/mFlIRAG0C*?JC<`hU4(4auKrYq[9A'*!)Bk+uG$YYL#3S_!<
%EF3$ABtUF_lqs3HnaV0N0'pU.$[SRRg@=>P:i)Je[F26%/2*Pdp%D3GThZU`6@0L>`OdC)W"kfDFUdea1h>>&iQ6)*gci$4L<=a_
%CZFW..!'>dd03+=bA.&^Obqp?$Xq[57GX'1M>K?ac;8]HIetfk0'h"4BjIh_1bS)qC,MHHoms).QJ?%V-f`%-g+Tng6YIgGcGB:@
%ehCq7pIt/QE`G!D]9D%*AY!&)X9Q;rKU<0#*;ZJ`3c:QnFc,&S<N#&N>kNBX5,`\2jk;#$=?8<D#EARVOcFnXmXC5Mh=J^\:##%S
%gZMI,4'Sm.(45.Z0<ceWg&3Deal+J,2X571_XL;JCnk?(_6e<<Y/T6%cPN8(Z$fS&='CktcpFp.#KD"ZVXEpFh!n-^1Zp3gs"q'7
%-9V1ekB/k&SbC,$@@L2$>A(NRd*\llKU6j'f(pE+q&;LE4A'cFqmta\5tR[Z+03e*?SYi\=W/Uu\OX1l`0R/>D<pTf"_Y$ZW3@5J
%)Dkf0-LbY4dl1:?KT0c;KPeo)0<us=hFm4@<k6aUU$K5C6+:/=7ZGj<qN*jt4F^qt[ofgmL.b;02W.-N[^Xji1)k#0JVo%e?>%eW
%[aYW*gn^KfXr28C1c<TH*VFs@*q7A!lP-tmV3>7RNR<4$7d$_J_1q05Af3,#?%PS6i*r[Xa-N'kYQ<'+L%6)EJ$'2$(r"b-j;TBT
%M@9W!3UDQlgg'bf-5!,d/2D1L0*3AQ]W8qYR.#A][F=Z:e(r`ueL!9oojN)6^D<fP<kEr0[P$eO6U.`04_uKcSG+MFM4ZdMeB]'1
%)e@hP!NhNIm<YNL=NXV/*&iJQdlT1m1d7rr\W*:;ftf?c@e5Bdk0AeS?7-e6'iD&4)o^MPLglq>qoVA4G:nh!%WpImX/9DmN;H/U
%qVbY8KWPZ_d8PI#SW:df$"gAXm9BZqk^=>YAB^;-P0TBrCp;e#&<fj<6"WVL%C>,kIQq;V<W,^i[T.#^<;L^+4C&L,XQ'?o\ej[D
%He`SC5r8;c-FT.Sa]!Td1&N<70)`qVa^]$s]CMr?A\sT>%E'GuD!48L,*3A'NuoaU;6+imAL#,b@-rFZdD/elnqFdPi+.WHNOos^
%d,%drhc;7WV<CW9n,`qJocggX0%-i>G;r4YA-@pC7c5Z2M>j/R-69dKXHA-uVh+2KgP^i."OMCFdH"q\ji0LCqAuga?c^=@4MU,j
%`-Bj&`90B,7NZ+qG%",fq7Tn.l66.!aNd[:FibhTT'Mu%*S[lkQPdf`AGM/,f/K&$;-F>r?8:Zp\-Z\jaoWqKRf+(\()UB53C3J4
%':[Zppt1F)NO]/I+1)!'[**[r#`]K8a/&MC2aJ[[7BiC0K/nk?hUVb?^u"Fj$X$OX!HbN[\R\cJ)"5MQ856Lj^s*8l`-^P<O:\1e
%2jBM."ngNHk:<i3`1n2e]Ur<ei-,a]_eFcNkp_Hf7e/75:ElZ+VWN9o9CQX+d29dMVdRU\R_:th6$5Fhj=BUqX4g7imNEcfeV4`X
%XeES0!@bBrRB7J_AZ%m&L$ZMfU2[SA4h7"4h!@P*/m*bHi36hmn24l^6a>>2oc+1DdjLp.G/d%X/&UD'ESib;+i/uUHQZRs(7UKc
%;!lq&kJomJTjBS@NRC\)EC,]2?Zep\5HE=i5XY)kE0=SsCl-mRKt5a4<I8`XF(7:534RKa#qk'9=Ymfh(jfm<4m'EF_iOMH_J,p[
%:ZcMf;=A<G/=Zc5=B6N@c`?_3B^:faJb((H8a`BS%A^ZGLDa%F.A..)b^!`^f[9q#_^jm($t&B5qE3C"mkGt-C)1LM,eX+k[#WVV
%V&fhBqf,T)=Y]ijbEG8I0p?1ANI$EuS#.1`U>b\@!^?Nd&F(4>>$o(VkM]tS-g%u<`m>k&Bc33e[2Sq]c=ZTJV'l/Q<0Wb89nF(7
%YBZ-XYI%]om"OM^#!&`DHC<)c2p-fLl9VfoD7LR2P32^^`YmQL>.L4["m8eZE^#*SE9+Ol@eEWn,VkKUXn+31<bW3FL&lZp%a/7S
%m%1f,0U/<8:6R^>At2&T&JnNDWJ$ZrS<UMED"LdAT'8[3Je!P&Mi:T?Af1MK&:o\9'!&VWB>u@6i/miC)>YtRF**h0E]uPn<Bss.
%@]-MYe32Kg(TXrPLMu^ChR"e,KtF8R%k\>]#cI#9&u\a19oSE'd+EB".u9u[qIfDXR9=8>[Tr3R=jBLaG)AL70=nPdPmAa].Q6(?
%"J3p+go2)c7po)9ammD'Z7pX1@4RL_hjYofe-7Vt"_9)>fMu[YNYjurlt9YH=39*mM4B$8qPe?=PO%1"2%G#qG#gO[69eg+iOTE2
%oq&h-oBF*>]17&]Msoi#\T_B)Y:R06:Q?2#lSkCMDTpA^?*+mKmG#IHVea,NL#k8ZO'd--(,eD7IBhSmQ:t^]^BeJ:kM:0KG5cjf
%E6c#-]_F@2IsGb2fj8P\f+2Saji,I`XgluhcH>+pf:0rV?=dcWqWMoJT?Z4U4>YT$q#a?)nqEJ8o5VI-s8HTKq`$g,4)&N>$#cB0
%#EOLAh*Tu1rGL_DmI!')-@ar9gHTnhgEns8DdS"jSD.>o^:edBAA<gOb=fm00?Xajm)anXge>12]3[[oBc(01DoC9'K.l];8o;-4
%Ic4\rW3^e\5,nX>I(PRqWQcO.92FuiPC[DpmFACq?Q8Y%cB%lmH/loeI/*Y`DJ/rL>o)tE=ROTodJ)<!V6uKdH?Su&gKRq*c+%s=
%XLt)#p0`1=m[M(.V0i74gLn!U(/(L`0g8SZX;u*uajeIY=>[/Fm;EB_YKt?A[@&Cdk?AH\GB968GCEp%pQcVf*P""$Yk[q8Eir`[
%Hh-+BMoCJ6jR].H0b<"DDQ[!n:_/R&<,]iUr`T+M6-e8fR!5]3?Dt"j//",rMat,FF-W#ZffG6YI+Xrl?JS_poknV!nkhCo^[Wb_
%p"6?(^-5YF>Q2"&pMYK=E?EeFBM4D=qmV*A:Vj[$FWI-$]Q/BQR(!4p[_1k'0=P9K*u:42'Q-&.fYTHG^A,jGE#4t_ftY)VnK/8_
%(RFEcV0?_$V>oi9g,BmDJ']-&_=*p"NutRMl26a_7s:PLO-UR)hd:hDD"^n'j1SXdj(YIDb-Tq;^@[bbAfklb=2j2Xs2IZ[O24PJ
%j,"S"%)/'K]D:n+nco\ts&^cen(q@Wp><MhHCE`<SD-1VF`L]q9.t=tg'%fDba/jLkb7Rf[J/RMFF-gsiZ4]CYK-Uh_HOD@1e-2S
%7fHe.XiqoaEJsQ44MJ5u:9]D6BpuFmp#,4pp\n<(\^``ej"7ogpOodcqUJV3(q`*-@&4H`4UoZPXX?CVK1_5`TkKn6#EQI&KmZUs
%37%L+qIeW`b!;#?rPnEfDWbVLpK=D@(7M/*R/hYorV*E5B\S57qiS#C:4oRY*E<HQGFJ8,O+Qb[C\uE*rHtHlRWBr_Nu!'m&W$(p
%Z+6I\H`!1mQKGps^p;:mq2Oj?BVg5e2;J"IniZ[3lcP.&lG9gR;:#![L"5b9#F;1Ki*h&1(-Hop+$Ab'55Me[FSF@];i@;_BH<@>
%q=Wd9$I/6i$,X])%MmnYcE?n`^Cks`l`<$`mRPZW7IT=eQn3-^)[EFoFu<[T3WEedhn-;d[(if`b/0\_ip#iW+L2do*^0Dq/=uP(
%1W_J?^7Eri^Y[WoTB(104j-'k5+4(E!!d_?#.`P+NPjke],S`+>57qW9saK-=o7!,898XNnPU1k":OZ)n_Il\FSt/o49IB3XXIZT
%cDS:D,V'tmc#)($pQPP^(S?j=]^)!QU\ia"o+*p*RO03*ispFZ]B7D>e]f2JC-[L.^QUn'h>KC-'"/1%]mD\uGU"JalP3k\J,e$-
%0aXMjnUTan4FWpPl?ZrWDR]7o!;ZI3Z2"4N%j!qB>lHXj1UgUrX]AeqZ+1h;ZC?@Cr98T;C!FE5hstXpn(4E9mYg1pQ.e#A$[dBf
%1[<uKi;JhJr-&+6fm<L')umPoWdaTm]lW4W%\K=PQ2SQ5j3MZ2l?g"TkP8?]-`A,iDppOV?KFE8+fE\:;XJrcY/k:eV.`!tQ+ob;
%WX/VU;VQRBf\+bYpuaMono[s7YAWLdYr=1JDKZan04:#'3LY]Rp0ni_M`bP=P>&k%P\'5u5(5(jbg!k*`jh(T6B(W*8&J.b4@ASl
%-14+KTYhG!od;I6S94i5_.FM4lsM'AGoFBjl#)%frEeX,KK4-\`XK'I;!J(%RCb`Ai&`!>@H7AISpT"?guEX^r(G]Kc&grlqt"=_
%[JgTI:4Ar3fFgoBEqq^HiopHU*^/qdO(Z6mr9RJ!92#Dbp35KXJE]f-<bMdIj!";(k5hOKhXa%ugVG`A6akL>667O]\I?%(RmnI^
%<Uq!^0.+M*:O3,Ep@h2.@(fe"[6N9Yj$HrJh4-jsZMZnO545aX]Gm`;"?QW/JsIJ"?AV2K%+5Be-%WoUOIu$6HR(,r4GE_:^">2F
%i!qpo5_o_M?jVGM;;oJ:\7kosf\o_h(m]MXkD:Jc=i,G`eRQ&."-UkW,k_6)a%oeCA$K5H6\_i'AojBTdsE1+H/;8FRQ^oJ.,ls7
%LZCodhhU/Z6nW"!1/3;3gS]+di#W&-cG=:K[$d-`O?t[K%[4p++\!QkMoS!"<W$J\"n"N4_;";WBp\9@lX`bbU0KjjI;ntO9]5*Y
%;]76sqt><+7T%4l1[BBU&cQU.0VH"\B9imOS_a1dMpBn5#A\885E/\1r9_5?"32Wp]:='2P$Qb#&K?XeKEhfj;FTYR4^SN`P)4MR
%ds9dl9uG.0M]Xkc3VW=B1\P#W\+G1kR]u>+0l-B%#@@E*P94+OR[(QYDS*XS-F_IW3*CU4q/CNHgDWdb=H7!^YnscqYO=0f$lbg^
%J)jq<Y&*ci^lnfOOOjnNEH&)fK?,U0hJBMgnG1a\r`SRd\+@V\q+nbAjIX,5rR%e8c-5^(qc0J(:"7EqKe//.fq,+*4jVT.A^e!D
%ds=%lc'UFs.aR\kYM2,LX';3P9%SNnMJqG<S"EG9DeqZJpi!.%\!U!'EtT:6T6jSZIt+r:>5]L)>Wb!63@%8q^*8q,rW`'QgZ8VT
%38Z[UXNeFWqf6ke^Z,RH1hg6hJ)U\fDUQ'^Yoa\8n&7"&k7?bE4cpUg]8s^h4o+C2lHt4pWt27l+"^TB&Y.bnp-CRo4<5(;A.*hc
%I/n:l:Dj<mX*Y4?O%gdF9;%-,L^QW"SFqL%4;NhCZbk;Bg=s?N1?b_`:`:?UT!-S.aq"j:p)Za"oag1mjnR]$L.p(^hM]kC^:nUU
%o6FYB4R9K.q1CU:=DF$X.'Eq-Z?Hap(l8Cm\od,&T)a50AMI-YqW7^Y_HOYM:!Z3T+d9^ih!Klh6;uTc[dn`[R<J2\jJ@i/F?e"1
%?GG9@>KG\Pa'\IQ^2_0o5p(=F\"(_+qouinIl^i/59A]c4o0P9iPFRI]tKfI^17P*g#jm+0-62sZ?=N,h?=%=^9/IA7lU4$R%SdL
%$tl8];KJLG?3972094OeASUO#SXt8ne1h1eZ`bH5H!C1Yc`h2N(S?2e8KR?JNPU$/HffM&bMNUbO'6l*c&JZ_LI\[V>lin)a;7X4
%g0M^?oU=hk9g]8s2RD.EgM<hfji'0&Z\]Nkp1lT'&%Z!&F1Z@J+.rn*eeW!qiUa?J.sa86PLZR`02\ju34ML3X'WO^)^gDm_k)mP
%h7cq&KT1,9]9D.H.Q`&:Amoa5-RTZ3:-SST\@5IB/EHbjqSD2&?gaO,E_(-NYtc718;t0Ki8g0J]qZF?carr=G'SO^iT9goT$H%!
%DAMN<2Rl=(38aY]W9,29?X/UWH5FP]+!+FrIKNR(G(JuT7ol.oHfRQil]mZ8O8T)`jJB?VWp>*Z=Dt\#*o%89'(O"+omrQ`gUDWb
%#^7r7qb^W]Ge/C7]^WWhP8I"nJcm*gI9,<"F!$"34Es2\gO@H7>065t#_sK<o9JI=9f=\W>FWhqB\*"B].\'qQXJ\$2Kqag4h887
%kL@9-%sIOLCNGIOh426Mqm9DXWnfaJ7G6VaiQO#JfBB)G5CE8b\%B0ZArO6AnsSSmbq?KfUMasbqr*lqlIYNU&HD0Idc;#%o]RG1
%c/sG[=['SLln'8A4?]`or8WIWI!>`YqsgI]l$ir&F`ZMjo.[5:^7DTIK^!IMp5f$dCa6N8l3k#7\Y8m&o^j_9r,R7_G2aJqDI+B6
%$m%(7qQRWbN7?P*frj,VKWc?hLNclLQhQ!"l6:WIEB`hZ+7BtG/&?4C2d]N7[I@5\kd_ecjb6d>CR0RRYW5'DI+\"go_oLY:]<e#
%H[#;+.0>WGDREQHO']2[(CDt;i(<EeIJ)^egF#/-d?;IH[Ibo_;;0l1n_WNU)=2jdFb;N-o=?XQm)`l3oQ-^9XlE`tqb`[#m<Pr2
%r-%KNIsC:;B,6rh<O.ggpWneA:hbIL4tYU&4gPA;?Wu36poui(fHL\2GOO>D.I>m%"&G@Dq;CkufC,7C#?&kLI_E(r^N+gIiPbon
%;f6gRcA_jNH*Yg:GLORa/8]3\nEB9%D>Ec,K_"b9@5[e5bfAh)pP&P#Y2>.`b'KiCgtHYk7,*KZpMK#F[^kCff7cqAl35^7KJ.Id
%^-9$\1YWt]j@29m?=%s5I(*"S4*SsfUU"of\+=FTqf)/Odmp%D]BAS3mUfk=f)?U*BK#a5V09NAP'iJ$7Zme)jTbA;1W4'ALlL4p
%j?@sMq?&:InA\,"[<j"(3k=Dq<&k!?8'bP.oAu0LDI@=f,kPFa+82P9LucRb,<s#M]qZF,]anF-^9^LkT%3E/pT$*tk-ro>+]k`%
%jJ_Jq]&E8&KpShN5NeY'?[=+)S:8.-?W^53Z\=+gp<=GNmq,-'lokh!'lo@:JsiL^VbtFebSb+ogU]lTqQ^RHRa"(S\@HpCNL&_<
%>9=3q:1oV!?f*Nl\3Hn4c[CEn,#''<INrHP')!mrp3lATh@g.Dm$b-JJ_]h?3<F9,0Y;=fMiL!9]N*$k^"=dX1d.!Xmja+9m`J&'
%c]m!;&q]P@?@4St1HW'HF7f'GH"fHhn!n+=jj#nrhOgdjRX:@LDB7oQfp+L3ZgI]E&1D;O'Nb"i[-'V.*f,[95?onecK:"uGHf8#
%S.QHZT9\A;5L23I?JT8GW^kEg>^M?>LG8T*p%OIY54O1.n>5`qSb:<J4D*0ZKL@c>h*h:gB&O,[_")>#;=*7WYl#];I<Do]+Pt/T
%>bc9<hHW=COZ,Y!`c@'":_tWZl)d*L%%b-MF:&8i'i/p[EUMsLY5VQehCK`_AtQ7s8Mi6:^A`Kf?e!`<h/=?j:T8u9LFX`2_s[m6
%CADSmZ=71un20UhV4q+?rG!jlds\";=s/8E^N!.gP7h([JQ#Z3Xp'Mt04pr:Xb'U^9A?L#b+#lca*DK7KMgc<Bl1WTFT,7S*oHV%
%mbW6`AZb`Ej6"M+K0/8[m%-N6jQ1_TG;YMKE,)=8pL0LHgP(5>fHXWb^&N^9nr8tB8c$,CpO2!q[oll(\guj#O@,UYh7:_NCe3PB
%]2i/3rdAQB^JTH>[pJ-fc-@)D_Rgt(@C]S3KIs(/cCKq6n^QaU[@?=s\(8E5h("'Rk&RZon!,#h=%anj.@d#Q43kjDoqh7>K?TY0
%m_[/Nqq],uYPJBdk4V[V4sm8n;.ZU((eqmf0>NrpN^&Z;GX%Z^\C8)*FIm[t(%uCqLP]`F?fqn*,OPA?iTl+:*,n&#N>qUuh'F;^
%/*=LVG8lZjpDf2`/mN==O;U?mhF@&6Er4_jS,)6n^AQ&RQG22q5h\/XFS8"a,g#5)_8?2P4)(<%"6s)Y%bT7.KtYcuq82^Yb3n1*
%A)B\4SVA`Ef$!YT+\ar*^A]kBrOfSRRsUJdo^>cVP,p=Q:73(bd3V]6U1K<=_C)Cb8"Z)r'QRF$c%Qu$DIYAb(^*'&[%/kP(6A(]
%Wt.j8a^(sKI6?.a!sumh:%#DV]Y@Bq\gljZq<UfY:=_ji4V"naRb_mX*u=G'*1s[R-8X`NI(iG']c`<GHZ/"jEG=:`/-FpPXRhP7
%h+i1'geU]`)#*^J(&qV!iECLMJ!^e<p=nD-(<dPADfXTlc#:GY+8:fm[)"I95^MP[dcT9=Q^&N^\3B/LlnZ4E+b-ZCPP:^2pYT&\
%M<u?K?2q.\r5JfEa$pkqhPQ79QEe9F7jQLF$b(`=l_dP"-@.u[qtZ;<UqcqU[KEO5$JoTa*tlc2R4HL[=n8_&DpRO;h)KB!G&BWn
%#&eu2jB+tfAi@oN7>#dlG<R)!o*:7.%lhpXDW'8Arfn$<jk]TI[eVfTr8YJ0J-:tpE-JG6^%jO5p!hfWgpq'UKtY%+$Nh(9#23?u
%SC-B=;80.R*Yn,&8=ue?GDp.<Snn7;5=?.-X8J=LLKb(4ogHX5Zf9^UrV[6dgTS^QISmVe5#Z\5IFIeWaFee_4.C`ni0L"*]%4F*
%<na/r_lJ&lgJ2YC!VZ7q`@VN%aM4,(`NSmhh!V2q,L<_j?MME`jDs<"\OrR15T.Y6bq1P$IX/8/l5R>bs5ia.cL',I+3((<gt4(i
%,?C.E_ZM7N>2dd'B!\+TQ+_/b67tb>4KBM-]CR+.lEqT&.h@^+jl5[kn6Lt'q\4/b=4D!X`i$Fa&+5d5jIP&sF]S>;NRdo`r.U?(
%j:&]S?UqVK7_/Qfn\9DefE\b_nm"=;e^`:C;C\a?j'''Y/N(,Q>=J'>q2P5j#-V2kF[LU&/eWHp2K#j'n("LB4D4B+>K0FOQY?YB
%G/>*r::qU)'DU[[A]haH%0)bEUNDm^2e6KIZu5=3qd6ZeoY-[FX>:i:Xj22,p"sTH#qg4)fqu)GS_s's0Og/kG]O_:=mc/p=?s#L
%j;i-;?bV8bD(]LNJr]bC;hj(l07+f#mgf?qY:fk4OX4P'Dk[5M=,W"qb$aY='=\(P)8gA!UL*S;']LYBNFhrmeu'lNo?*-"7T4e?
%KQ@$mNr4]:6SIbo+NPtgbrX!lB[U$p*&$oI3r10BT\_E2WiR:fIRXM)(i!e@.]\dDUrgNL6'1be'kGB\6)2<ohe6VmeY/lsb,'QL
%nYo*6=kAX,jo]`7UTEKj(N[s/I%PQuL=m\kPg#hDUj4]El7!7%$(PfCcmPnu]+-^W;4%,f5iZF`68oqEQ"kuWLaL\*-MBP'=2;^B
%6.T*Yk4MD+%(m^XSL@-`!%qTFNO8.d[*i)Qo94XS%=O5LBc<@&U7Vq$g@6u+#jdFVKGDjkBqoQ29l?&8I:K4.+gCLrI>@M;6s'OC
%3U8/3d->%SS^F$uFhJ(-o]TF_Vq&.<'CrK:r5bT2=9RSP71;+N@K"]<TFa(83]^"oN9HB7dP95UX76K\/ij2C<]PaOQSti]gH%/o
%hd^,hH$hOV1P@$B&5Dd;4mqijJPWYgi!a]c1t\BC64$mA1gh"\8cuYb,+=EDZN6VZr,Mo)(b*\&nRb%A;5PS%NP*&iOQ.:3"&0X)
%#gs)\-qj1=V#_VJBePp28JD&I;1PW['V>Afd=cGi2$=.YE6t&(9`T5LXb"Kh<r*MT:6]b_ftd8DFJO1:*3I62GUFSqnN7($0XOb!
%H!)fYN^UH%L^L2>^kK]@o9p_?%=o,7G5[4f6b=BVP$gYjLoA[YL]A.0M]ns:pefqp3f_>/Qs!l#bXrgtJl!T-XPa_g1eO(F.YDXa
%?Rn61\-#N9.41eZ>bVG^nSB$Tf`63s4YZ=cZmJtD5hZ6bn8o4mM.f/CfPu0c!SERV$Nh"cgsB!J8fY#WH&4?qXFs=eg?0gB'>P:i
%n,qg$%K?"Id8dP`>eJX]PP(>T>TspBGumNm,Q_u5WX0#]8>PL)=l4b^2.>,lO_#59FI!2c,J]p4C4_cSBqdt]W/puf/3&AM6XZZa
%N-AYki`;D-*.]#aA[<5!SnL7P)/AsirNsma2\&]T8#RX6p-T)3-c.*1]-97c0b%S7Z61EM<)hrS@mhEs%n3i;`VG%claR(@63`ka
%6V7@@6r#/)%3eG$p.1hfs(B.GNXs(?b0BcX-mKAQ*9JXL1aMqBTLh4q/0cVWdc=Hg8@5tHoY_JtFmL/k6X8pg66Y2k+/0CDA/p.:
%`+D:$KiSg^7&_&U3GAdETJk^JX@3e0#2i=6'3Z[gDNB%if1bHq2Pfk3MeLhW!>Gj"?AM%6&9K`G*]ONjf5B5<Y-=8unVP4=b='R]
%`714u6PQV(h%9St"UeUG%aSS5;a9ZspCQXo5tXQXTd1=C',MOIKcsk]<6ECS<KSA*".sL+b\E<<0!.0;F),>5=!G7g].m,g[:`?e
%)mgE;0a!F&),cYP*I<Hn[Y=q,H\)f>.gV]E0n@-l&^e29\:^rA^aFkM)&1@jOd4jZp<Gog)fZ*SHLs-scBo0SMOHXZf_%Ni,n]B=
%&Ge`jT`T]UqZTe\7(a#fVda4H49^+_GR-/X"/rQ2o#"sKXU2gp@_@h^FWJO@;Rg-LJ/]W0Q'D?FOBpK3F-nro7BXh09A9cj5Qh(D
%>ulk7Y)Em^b=X=IISN.uX'Ij1S7u(qGp34i864'>7DU)hMX[>:?/e3!8"qE2*udu!m3.C/W-"*>\UgK^Ro;_,8sl!-ksI@lUnBqS
%L_>@\ZAMa'Z-%TYYuVGgJAdEpi]#9mFAE!o&]>?N%=Y++\K\[AQ6d'`8?LMond0697gO0ePoPH:ZMu+W_N8;)L5d]R"?up<(g(;\
%Bhm+7_Z'0:FbD19HmYNu_Bt(U5(Ytk5RN0\(R6.WH&cmHnFa.=*/AH80bN&G\j5D&Y\[G9H%mV(/@a&8l6,0GXg["Zq3Z[XLka')
%ednu1ia)\J.gfMV$F8)pB<jBMY[?&*!4^j8TT"SdAJVcU+OmepWf"e@fP;gHOqG]X_g!U[@bjQ63:]YY_CdPQ1_jgpNB'O+6/nO@
%N2gD7+PfkN+ep$?@+6]YfHND37L_^D2Ea4BQ4\+4a<iCYBk>r(0ehVj`[""uL-1+/,Q:X``#>k\1pAL-(/X(U&qj]SJQli:,R]hM
%^iff)dl'TAd7,=gHAU?hJ#%**W#C+_5-o-ZmB#]`cq6t$A545$-l2%Tnd4L1#'%Ep5$QM^K*1+JLhPL8BPgAI8!kq8T8mA2Nef82
%:=:cB)Oq*LY%6OC7nJD&Tk>H)@PPZ!JTX>WVgoj-M%,&^6;6T5_P*c*!lcA@`g3\2Oi%^X`X$-"/RV;.OVYR_F's5BfTTDDl)50Q
%QRu>YgC&E!!=YCF)442&nJJp!0*;8j+bKc\DWnpXoKgL`/@]4cqI2iXAGL'!Jd,WrBELC(du9n.N7_4=JI'O2]2ied-l2'e7%o\`
%)3MY#9c@%4RRjfjm7:o3>VV40<VnV.$O%+t*Ks(_3$Q^SiWkNu27lnDX[g6%kdXZ?6N"/m9oS9js1q+o@+c-K.\F7N6-quc&5<ga
%/=-ue`".\q]9B]+Fs[h2l$E[kcSsD`+<OI2NP-`h>[qThF1<:D$3Gj'B,:ZbLW,7.Vhqb+d>FZn@IO$7_)ntp5gd$m.An1OFHY5G
%_bb[^MDk1\T`To,LdFYiH)tXe!c"SZ(G7&)03W/,(+u+$(&K/CD:?iENWYSd!BJ3sP6!cbmGYJ:^+8&M!2l&%2[ueqXY.e:bpo,l
%LF\CS:K!bbk/#=OXlH9\c-V4o%,#'B_?mm-pc!ct`"e4T!Y8!*^Qk'/#pL\8^O]8%^:Oan6!OdQFG72\`(f;pDZ]!;Ka/J"+Emn"
%p8iWb(Q93a5hlal_3EK$&1@"O$dm.H\7+BMGK9>J:^n!N?r&$^H\=E]iC#uuS-07#,4#kId8+b54;!lIC7\n$8dRJ6?8]hTW.#A0
%KMU/.d!F:+K3EGkO[tUugIZF9*&R6;\VY82<aaX7l?*._4p,1.!tn1?;,[ZunPf?D8*gd'L*/R?&4PrT^`+K<5t5CGQn;RaI9J0K
%0of88)@d/PO=m&M[[uCiP3dl1@Dm=Ui.?o?(g[f$kEq!_&e'R%N#6%mRt7L>`j.MR5n%$8rdJd4!MVZo;J:)Qp;?"]+9Y?glVm-X
%@^/c&/i*JA\-p&.Z?Dm,G_[RL+XMdaA"d\T8=7mQfdEM]0]3je"nlV8Cs+Q1%/:e6n%s_ma,S"WHj*OX&=ek5L($Y!T0%?e*$iM^
%LDpU>"I=GT.:`j!K3Mae=s;[*?[tl'$_k_N,*'G[SdWY,$RWrn5V,3)FN?3H*aV6*@?Z9@CD,Wu-j>]Y`3(RUK:H.DT+P=P=,@gY
%qN1oeHnf7?jQ$u"@Sm^&qlrjf/i6]F,Qe)b$8-[X9#Z7=lU0'Ok)BWC#pPI!UR6c]'u\Cl%0_Vp0.8fs(Uu4u]G=CAjG(N(!bM1D
%ZuJ?`OcEh9bK::JPUM294q=9sZ43ZI2F\+n#E*A:!HF=59Y;/3)G*V\o>r..On=GhOYhTT(U7Z[lQ4Hh&)uAu7cGe+#":4dI8Bu4
%*]WY!DjEeAj*8Gr#/7Pj2pZ!S&>i7eg*P2(UO_H9"S3<k(WeP\e'a;U;-_NLZAA[QOV[Zoi%ed%&L`X"J0d,BYg>1.5`@`JPRn*8
%;jmCt,#Nuo,"Nq'[\*kr`F9lH#\+"5'3ShjOS%udc3qR*ML7Z(Efe0K,kMD+,W!d]).b%HV#A9'JD.I59@CKc/IF#YL.rouEAK?.
%'F>:?9J]kY_to6II:1]f,^nd!2Pd2-'f/r`TD9N:i\R$DW./V#OeJ8q4aqJ2820ac1-!^B'P1nFA_t1[A*;Zs"TJf=396?U\gOp4
%lIKbe`,-*uK`jIJAiX)qO9*:T/=B%W\qqaL@5(C-:@<6MGoCEV3EiU4Ss*[.]ggAP&&UCK$U+iQN5V6+91c2h=^/(6DbKUkVtX;&
%KX04lZH5gE!9WH9ZB9N-i<Ci$X:6p.,M6X4'BL]U]=<^,5THl\JW?r\R0.bf`@^VMm'+NI`#95^LV8g:8.;H2hMcH4Kf1Tcf;lZ]
%Gbd-B[!VQC'S<iG4`n!_:6LTi.N^i8lT"V9@Ao;gXP!^G6K9D](^h8I5=fsNP2im%hIsTgGZ*BdY7XMR9Ujm@Lp?Mj6Z:8[V.?,<
%?<aU;IoGl6B=;N`cS8fC@(c$dT.ja4LVQAe^QurC6Z9ab1AK47i\ch>aoVNK5E_=]@NbQG!(m/tHf'rn1-Z3CMh#o!Nk!&s.(kdN
%YB[=cE>"`i`J81%H`(R-P8D8jjIQb"JLh>;>tMbnO<Y3!i';P,nKU56U]6a'r.r90#tnglo`upqjW6?)>3=e>"K3Hjb*K^"dg4k9
%Z1M%S64\qV9#6,nmiqlCD]*Nt%bLGo+1Er7_$u.K:Nk4V?DW@WD[u?R7cY>TC93<"^th=$)C$sg5%b-$@,oF&qbfm%@SUF20CD6B
%T*aF6LJUt&EPI4(N"lYU7TR=[_MTpU/&\nKT!XTI/*eH"gh2=8N?h+Y[d_@O!AVD\`lb974?+p-(iabKO=N#)PD6u-^I)*IE$cbm
%88o+]PfLEZSe":Rk(D[dfqQuL-TH0U,[iJ[Pap0X><HDJNRZ%)1>E-;)PTk"E=4Td>1gnbM]:@4&Da[u^^]7?CY3oOS'YX&PA<Rt
%/GH^Vl2=V-0F/OOi,.<pfgnFujC7YI3OOr(&a6b`Zjsi=Ys/:6FkI0N>KDG$ARK[hdl<>,OtB@DLnc7W+o]:i9G0Gp@5UlHAI9FS
%fH%huG9*Bu&3_IFa@+HMm_k17!eV6t*:R:"k?r/#M4J4=D+\4Lnl-@5BQ+?g_uQW6Z22@[#)!&%S/d3<2lnjJ'BJMrW"0JFUB+CA
%d`gQ0)Tc.j":,tek8&"_>$PZGR!+UB"bA6B9PANUGiKdrF]h;@bQ7uWC9dU9dF!_LM[1-==bHt<n5JB2,*3"i'eD410[%i&:s5jm
%TaKa2j5AKSYeoLP?GI489$%Q+50N"5G[=`;+Z,0,V%6H."H>(ak<t-@GrUR8bS3+D$cRr0!^'.Y*lmOhYS<_E7sldV0_XH-&e%+4
%b2k@@@>YSX@=a2SaA$FZ=STFX-PRe]-W_q-`Y1`Wa4(E&1p%AWi@,XNM0^=Z`K;<-T[U2A58F\O6IQKo3!"UE)T$b%KW0[=]m4eI
%,"lWHS4<58Zf\(gJL<ht`uBS-KPAh#.R`DDdSu@-TFgVt5+9I"Z7Hs*+YacX6A[\o&Ld7(5f*N0>!Q7cm$^b2dL`0aXb[VkN/\.c
%Ms%D_oPueHNW:A\/K#41,T=^E">Ut/>a5CmO+XXO:Oi]/LjG3Q5iBL'$NN?9laPLK,+kX$rGI]q<m!B+3&K!^,&07k7aVp%kM^"V
%TGVQ$,*>k2O="0Onks_H?6bX^E>TcpM*d,Cl5A,V)WmCi5c"hdo]LCC+UO3j5""[om-tbD(^6UM1dVtl@$`fjUr>4b61R2Bh[2@5
%\1r"*+V_n8MNI4RbpK<#Qi_Y+.21HZ*p[3/JFL+9mo\r)!"saCn1%Uh.jAYOZ?rF16V`G$7WC@/LV%6YO9uK2,2t@Nd=F%snn:62
%ZX.%,:0^@!3")2*h[0;ZDqI#83H`7;`2emq-\o@QfAs0#.gE9e6S2hp6A.$JlopP,%?)9Eq>j)oQ',C1%h]K'8t8S8`CI#9%3I2^
%*.nkM&8H2[D,X#d:*M^Ml?<YV>)[/1c6*_\8i/gV]-?-;;@4$^G&U,aXi)o8XCJ;>\3R"I&-]?[&8njYhiWm@M!'DT+R="o6VYKE
%SeH(,2B4STNZ<jXIA8"3"*=6f1).:D-42iaHr's:YN'>^4kfI4Rn\NL2=b0@_42@XgGQ9I)@c4:hQ?sRY]N=p.C)e4j#<!aHC+hd
%'HEqH&l4K\;U&B66XQI<hRE#87H?JqAJcF2!ll1+8g-An)]%nZ5qiQ6D+cEmGBWNfG#f6l'o%m&a"^&'a9'!iR%JM0A$D1q*4.uD
%'Oc7PRj\cNK*VMnLl*q.9USD,M"&IE/Dq`sEqkTMB16-!,S:P-YgMD+Hmje%-tF%^)04pg#s6/Ackn>$5UH7q#[_W\,U<$.8HlAQ
%MJNi*>j]Vmdi$S73Y%(%A-7W"-YJf7F"Yc"XSHL5*EWN>\EU`'j>d>\K]C-uj:ce3mK;@Q/4Q-J64*9"`s/2Q/)Gi849@]UU048,
%YoLbtG])<:if5"aP9u,[_nld@ieR:W@\S6n(4'"\GWO>eV2(Ess)[G`?<MRW@j*uF#$&u6M'jL7*sA*P"%*PJS!_hsP!L2q15Ihb
%WuJ:CFsV[BE4F-t5s@MkK5Xh!JeZ@hh-B`D$7Rd$`M30-QN/+8?l.r?B>Q&f.='F\RBJNgk#oJRo+]DAc_b?*n3+bdJ9"-;6kWbq
%#_WfQHMMAT.mDK^!?^[T1*$qs3I;KK\k'.5pq0?f(3lA"KT.DR!cShio#V\No>\&7*!*U[$l7+.:H363*')RXi-$j2ifl&pP!2H$
%)Mde'BL`7?T]0umSYU9sHCIP3A],?HU?BP8\cF=I7lY"2KC)-%7lL$n4="8Tj^U.("ro3u(!ab9$3in(7.8ITXG$^GHM@o*ctRHf
%Ij2+*q\q:Z)#tgJ/tj8Vk^_mtLIHTD"@.eqM%-coV^36bK8[].LbT#2%`2?K$^N?#X#MR$m'16B/86@;J2;a>n5mQMSY-7UqBS@h
%mGl@rW(-nX-p`cTaqV`">qY\b%B$?q!eeLKkNk&Q"U>@9Hn^Pe.*%L&L:aDFGYK@%haQtDj9+CP-6SA>p`K<>S7I??M9,7?4h-\S
%:ftH)/71/p4<,"i1&-Q*0Ei[DAqA%N3$r)mbt3/lS7^'EYF&)LLsM#3Td!?*\b91@Q]d*1+/1"H89/<&Xc-fI3SWrCQ]#ZUKe,u/
%_V](Rrp;H-%>9;"-eOI_/#4q\p&iXZ30^4Q,fN*E_$O03cZ#1?IPHBUH(Q^%L2a.]aBja^<3ecE[Ne*q/.End)@(]E8cmu[hf8a<
%fh+$#cNuiVflK]]]2/_R-]fHH`?cFC4V03K:0C5MkG=1iKL+M8L_(>UNUtB0+iJrE[*,A[OH=F'0s/bIiCW;AH-<KP:\/aL*pnJt
%&ZbR+q^`F&c\aD$TD6<]n7aJ9HfSJ=m"Z0DHimRH=QAt3JA;LFUgVCA4PpXA:Y;*PE2F`l/V6j&LJS$7-fWh\@T#=lK$sB]_76d]
%jL5MP\Oc&b-1[0p`EWqf"#lc:pY0,JSrZ9-Nst7%T(_'HNm@aQaZ0@l;?@->7;f>k+jskN/j('k(@Um3M#9@OL'gEk@)ZdfB7]A0
%EJCWJ.EAe@HC>rhq5iImYf.0/>k7"S"le?kJpgbnOB)C6c*BT48YJH\P](X)=]'i,$,Zo/H#_BQ6p-6,LqL3IAKR&=jJ'.\l%'EM
%_I0^<R4;f'dL3dV(7GCDD2^.\a;M[D2!S(4;iV9mQj-KN>\.EaYk"J71Atc5^8-B+>Jp2]MG&5beu94=#Sh9EkV3]Uk2W*?oBHV/
%<)3?L1%1d#6)?OUdBt".3(#e^JSfGF\1+X[L,7(kME&l>$-T@Dfne8X5Eo"$=UAY;8grMZ:aVK)dCBn4mn"pK<='BMP>L*>''f4K
%Kn"88f<`<8gejM#;/sZRoMlSJ2:rY<oAIp1OO8H_J34K?UOWBA2=D0tZ]`Zl>4%+U&hbHR*?FOe/\'2\UFNtZa%aR:+^-,4^dPIL
%0bg(`.iE4:=V1LIJAbtKEs]BD8r21n66YoJ"!ma%/An_!bRQu.YX7EbMrI:/<l/u)\s6Na67<Vu,#QSE/6Ogg49JWIOXk`;%$M?+
%=0BG3>8/fq,9P[lZ8sNqi#@AZA\+HQ]V<fYXcSt;jH/R<kk`;r\e/(\_1Am5,I^.*hA8Es..6<2Nm1BH3/_uK:6-F@6Y6HsML8r+
%'gb5@_u["t33pjqZIZ7&'%.0t/4H$F7`oZi"j+G;)$2KLT/^d'.6hu+FMnF`&Y,soT#E9=f8V//Q0LuEXX?pPiS223FBi[$VX_t-
%=X.ehPD$bL&4jYF*(5s3O.;^]3VfCo36s:aVS%h/1sca.C\EJkM'"<BOdg(qg^Rg,MeJlm,%2F64#s13.iomF,HPd8>C;r5MVDB4
%s&P#(Wb50H8459PVJOM4^uCW55qKf<,tDe,lLRFP%>QTU\RVG:nmJ_VPrLrh>7d8`g9F8nC,]CU@YJH678=s:8rs;4-$9h+=Tp]*
%"`Oc:,(ebcSRTlc*%M,=,YbM`j9o,LY)=g',4>"(&Jdn@K@jb`B.ti+%d>-M4E1[@FWp*2p6_@02&4t.'#ct.44G%C5/\5*U**JC
%LhNpM;)C%5'XBQ00cmrM5nkih0QW8!/,fFFj.N@^^YbAN?FU?B=`SfuN$`^_p_XIs)Kp#X!.h1QR)70YeO$9,K,dK-r`i#7jcg#^
%)!I4qS@Ami"<:!PN,;H`JnF(6a<pXm&ritUGg@;fQ]k]4XtYBj*/U,/T`jGXOej@T'5*kd4Zh@Mhq?sn4dKT^=I>C^,!)tkie23p
%UkAaA1d;pnZ1hY!H%D'l0A3i\GASN8()S/=Rs3lMZ735u!!r?4>fc!kE1S4CK5`4PP:Mgng"Y%J+U.?p]IQ^tqu`13)fn;;Q1AAh
%5;_nd,Z_SeOQNfdMA)X2KZbHhi^2>5nO/Ia\-1'UT,n4S&-i4!6>MMupoo!"A6/h5VtPgFOk.]A"de\%\_PF4VY?mi11po.W6q8d
%hRRFM)@`>Z5@F:_nF."%57p+EJ8*(GI#+j2(?9H,$j;3I8-g$L8NLPUN=D0j,Rq(Ka>'P_6t.:J;<\2(hr&B>BWn<g,?P*dC6ir5
%]`Ejr$u3b'"()%J.%"or.oSInPqs42lBndX^;]'9*u;(5iahu.MHiYR+%c*rc+unld:(=q<ZclYCsCfI7[)."f#&r'025d!:;@%7
%aBl7s)N'n"3U]nT$_/rj#&Kjj_Q'jW;aT9%&)!XE/t+/N=A'3\"(aA]kR1f'TSQSe,\:ut/DtH'!3fR)#XY)7f\]=^s1mECiF&D$
%?6:<S.R>Z3X7<;Ri8Jtl90YqZ)TY3V?P;L`-qMWJ#!=*DKP@![#hQ)Ec]&TR85e"_?mBXp*8H6k@q-]^gem%3R-dPn/^#8j3#`7I
%5Yat^(C;6".s8;W==j\?LHk.]%_f>\@'PNZ2`Bn^o),(F&@eIO,72DsSsL!0?YtIo#<a/$_Dk-q"E&#e.*e1>e>S0T1fs>*]H!q_
%c@PL^r4=+"eO7eL:IMoP.4%b"/ibM&q.,3*d#;)+TH&V^OY&;kE$mM21]]'">hT3M=rcDMI'&hjYOOaU53,!oER\rkNnd0^G1`Mq
%)?FOeEY'JRGSk1H=BNEjFX7-]o:iaL!:J6i[MhT5i*L(,Li[StmdH"Qk[@QJ#^+3fiq#1"Uo$X%b"$W@%W"^u.$RsPB[T/h;N(aM
%cbebp:em&o8;J;dCqRlBroAFcRdXVlVYFm0qZiQ9]4O`^%YN0hFH:)@W^=GMJEpV`dJ6;2_I8RaMjGRKIm0l'm2Fk\dP$7[:IYXN
%3Co*-P3Y^+GBUI5V<q9&n99o@E,!4VPAf.W>RlehTr:=h:V(ras!.0VaY>d;FqNX5@!t$C_@=Q<!HL>.?]jsG+;>s@r=Mf%KSP(W
%[>:$h?!JH`3Q\bbJL8)>">^J[R"o_unj\SU+Zu-=Y2jadY2dQk3TPj6(Umto=S7ZY-a433^tESEk=:=^#b(OEacl<@>j1,3-lsF?
%er+@],%Q4)2U^\(/nEud#\E`2W1a&!=6,JG/`[,A-%ht0j)K_].:8TANPl+g&E+nQj8:7<9G"L]G!]OKf*tXDfkCdRZ&t*",I&oD
%aC.jFa2&p>+Q;GO'eLUf-mRV[cIo8kBl$56^TX^:^m[F%JS3<$&=ha,q'ble@qJ+gIC9;(`*GBLL5:X9;Frka%%b^kOIM_!>BRKH
%&;P/]Vo(Rf\9O#e-dfrASi^9uk(?3pW>d/%(*`Vg[hC"ql<3NWm#@bkpP2f5^j9C^N'p+[`F>;:-E8/#hXLoF4gO(K1#LDi^`c>b
%XpHA7/3p?fLM/fLpqs'E2B_&LrR?pIPB&%+)1WW!^gUk/b>DB[,=5&jE,\K!H+CZO\?(imI0V_.W!0a5<\($pAL"hY@(&T-*1+/8
%=?O=GJsmCP49R.q,=,)g1cBfDe.'_N)[8if7#P^=h?&^,iG?r+^>(uiSO+h3!-_3G-UIDJGf03G6CS4S:q2&'BOqJ?q^'M&j[(PJ
%0BjVoiFsRK`(B!.nU*>:K37kr'dH'L6K3g&6cnA-4lESMKT`kPM*.(7=O>g$J*:lEKo:$]QJjM34L#DR`rUT1DRI1%*84'rcjltR
%U2C"+=h$J"YAA/?f9_[*4qs"7$HfJ^N#s64Rkp]W3M98t:B5B6<((3#_fd3_@OgXh.r\l$%#n4uG2aN<XoOR2mr;1JE#G+#6g?R!
%KRt;9nH]ZSPLq$_arlVd=Z.&kO@l^d`9!,W)\M*Q[JiQ&B1_8a$ortp&.lcG!T1K;b/@UMF"JP!6IaY6HA6?RiD)=5dXcq-I(%uj
%k8I!*J7S;F\q98&@q:i>715:u#-Q-pYY:%6o+=<L2&Vaaj_7+!@oo4UiN-mXJVWLtHog^f<A5E?JB,rOp66j$V_KCh<quA@aP@]&
%f)URpmZ;3cb%.3&]g=.niGoJ=e`o9O.uo]]YR\(Jq7,M/9q:Rc9bIhjOAQ`OTjWV'2AD+DQ)-.*jXL?fKbi"VOW#-O6CcRilY4Z9
%ddbk1gd@FNEObAoF&Wrt0,;]Y3@2&803:hWHcbkF!/Lo-Hi[2f*(jZM.cP6ARe<.@=2UFNb-p<8.YihU$3ck0al+53+JpM6ZMFg;
%QI2g;k8WA,buUZ1m_:.(NPIlnjN+TH(55-X.I5s94V9+f+`K`SRrp\GJXLg@a7uch$>m`W@-@m0KVhSEQCg&*C`#0U?C&Yp0>on!
%@C[dma;"b9\(_ZFTZ,)nL@=AZO>Xo=G0LMt)&PGqcZr&Ph@$Ia_ti41_DSdgJfEn@"?7u@@iGCL2F82)7P%sM0FECuCIGdPHt!C^
%BWZInZ4mR@"t@XGidl'q\`+/nC=pg(=jPYiC-"/CnsD%K:!)A"%`mDsAKaB<\DRpc?FW%X[GVJEZ2>gt`V5m2VakaD!`tqCrD=4'
%-<G%d8ATa?;^gW2nP:EV\U:-f7i&TjMAn'(F;StI%OGgO>j=Qfa+'<n)[?3ga]D.'Tc6Gj["4IHcm\+Q4YZu"6-:J2ZgE8^-&NB2
%E7<!sUg(5&*)]2*bAn!S1"+u>et1AWO)5mVeq\(#@N3m\bd9'36*;1HEfD2\,C:/j;`JVj?gGKSR%j?dcRG\+@?*./TY?8$'*JDb
%>.$3RWn9d23Bf:aOE[_7XI9F(;hB"f'8=mMT@D@TO'#Y0UalR!#(86dq4'^-8fKCMSjYe0G0Hc;#S)bPs+dXD+?orErF&^rbllOC
%iL:G_=+&3A(f5E"6A-#<,A.4Rl:ls02)#DNGdo0>j\#.O2iCdLd,6SoJdcU:E-+7(ar)A:A?'`3f+&%bW),a#,":)ElW:`(<4e*:
%>?&[4pe>BF@h3V=;27ah$6/m_h4geZONP@`j:ZUbO-gL_nJ(OG6<hEi.17qpitG#_60)N`73J@eV&8PjK1FQW6CRS[A:qs+"IJ5#
%N<PO'-_6<m=:qIAEps'cE+b<=R]qd52oo\TY^.>WZPQ1gM%:3V!'@,_!*87O%>$='$hTQq6(/Ed*P%Vu`/=Y.T*pak>f`'R/GA(C
%ShUH\4mWZ+LuD4=/egI!qb02W,=I'<&7CT)#;O;'%7ep(%C+32l/^Q'<*]=JO?MTW&720nV'e\oU4@p5fhGWl)QK!@NJ\CRW+bcd
%-jA'L^A=ic>XF>VO!lW57H9*kD<!sJ2I$S"M8RnpO[4h(OKtP'k601kJ^fB-Kn&.dE^_'a,*Chi+\OT5i4:2Sg^tXddYEJ[/ht1t
%"0T>u9/;:/+'h'Q_aRIUX(5($JZt$Wm*G)=(\!,(E2r!?3?I,(V_\pBGL-De8/Kl@6"qNt"KR&ue<11"GQBeR9WF!=N^]lW)/oTg
%cuT2D%U2*SR[^gAkmQKuFtrM0XqsBPEZQ"J^-g!R<+^-\I#t1:f@Y\en<C1SQRi?DSHN_e%sXN"i<u:6iGUVq("\U[nq="H0F3DP
%OaJK=>Z4)F,@JX&1;P;bIZ+\qJ-?+g].=&W;Ru-)47``,@/PhafQ$*h8'EMn\/ZH#o7Raa@:'e*DCcV].MkGUq@"JdDkX*AWhsbN
%59*BH,:Qu^CGPt<BMd+hM'%Hu)aaQg">q"`im>@dcmSND>j;gSl_#Aq_50VU21>%7T,"2>*5hq=iRJjrL<h6+N2BH*#%&i_'pf)_
%10i)O$\e4Y)de6P`>L%>#K'5i;9MCMi%FPmO`(ojYc>4-?%h8LL-6/PI$WRAaIdhr!0UU^_]X_$cD5H^,8=ZrTa9!o/tV6.L_=_&
%ga#t_3>j;gj\\7cLFk.1_.0b;i[?Jn.ehogT0kV+m/SE3Bqj_]<u$3hVGmQEbQp'f\E_7o]b$6<6pXA*)1:41oTtITkp?M])t#/A
%IWOT6gLHkC[3dBG')&!P7':Q,)-IKiQ<Hb97\)<U#lohX"Y#5rF?m!VD&SQ/#QR9@#7_JNoT=hV"NNGGlnUQ\&h-SYZ"r8;+il-C
%XH$>A89.*Ip^TI0"@`A(r;DF1X[#H[49TmO9;(Gn[0)]?=j=ato5Mp6X;0=4nF7)/`bfuU0AojM)>JbfnZ_>r\Yq$&L001&JdEgk
%>>Z5ORm2JV5[[1*it/LR+m'BB1_G)X=h_k6&<2N_^.r@BA@l*9!XY^5_p.C2R9t_"R3?@dPnkH>NFRGtU^0E(HTm5TCl':[W5OP2
%=gG;9#<0e-:go\MSD_;e/6gbc8t>Sdj/=$cEK's%JI<$aA@DdI%oC0.@@;X-D?q%%[Z0SlgnFctTHfU87'S$@Kk+"Tb',kbLDGXX
%M4?6`+p5]9P!bJiU0?PP6kL#kX*G/-3U4T258cQ"D**t3f*hmhZ3mE$2/[L@XI.XkTEfH5NR(&(1nJ0S.-kk)4fl`rD/p$T,3$TJ
%5m!RqE3:%Dl!s0A(\=aaeqd336'+BGf+i=^'4h2Hat"I(EP4IK2NEG=8_M;CWlULA!ce\s/3<K@(*oig[N.+ng#R,**Oap>fJM#g
%?iY731=H]V%htOUiD5>]i"2VGmm;JZ24%\\K&hoMK]H4]nem$.rN8hkZSq`<p_udlru>D(,,aCYGB)1;3T!aqj3X<=HHp_pTPFt.
%25%H%-d][VO5.6O+$%-8e]VN)k>=p8$_)^7ELD\5Jqe6+q2a6K*3'1mn6H$H!\#\XprGIS9g,81,oe!PcDE^2@HXre\/NXFY[fPb
%kaLOg.gJ;.D-DX<&+Ksm63tMcj!#>]E>6=Fjhh1tB1.">[1'-RO:a(%f:#JV66*Kob2s'@NcL+O$Vjqe7?t1M>ZDT.hL%;;<VXYh
%]Z;B\j1:e$n':S-J"mdofU]eJ:e?09mhA&TG+5EOfTSkQjJl%,[;W_kQOBb-Z0.'K^;5L3;Xac38W-$hMb&EO+_sEIB1S0he`e&+
%#*)Vd'_"L&#<3<O@<7FiP#S:nH:Hmr!!@eUK)rO4"Drdl]^/M#ifEkg)n$S`@.U3?p_QQ1$S;i,nk1eU_E>/+5qDXEM/Y`40+a!!
%ErN/KoP#Q_KBo#2&)\X',N&p=Of/9pla2fn3`mp0g&]0T22G!4JNCp"7@k/B*H?@,KVnl_eMe[T>i-UL5s9)#Me`O,.&>!sh2id+
%H3KR[,M<Bd]B&#h>7S/X$NeV9\.sQ/;E\[!^\a5q7\DECKoR_cN$3'HdaJceK7h2oLl5J-;G>a+gZY/`m+Xe07YV=e(nsWc(I3U#
%GHrOJ&#"<'=!Or$_.u%NEG&MdcS<[2!9&A695HdAj3TM.e`&FfS@OS,SouEF(Q-i'ZUp18]=9!D`2DW8Z:;Z!=)tq7d4hpf:(@ou
%QqFS",l"rUYFI2#ONWnuZr$=Yfg0Tt.=oF32IrNi3GQFt6QikJp,lqLjR.(##AKp8XYq_5j+/c-!U<MYPW6pOh=>goQ_*=@lo+B/
%DP\;TVJ0Js_>iNSbQ1WU4A;ni`Iu;E+N.2'0cSO*87C&)F"jE&Do;q`*%U^W[34fpqSKc9@"JdcC0"CJ??1RZDRd'S=V8L#FdUm2
%Gh%p1J;t!i,2UVE"NZcb86k3/%6g8%*#M/a74tI_!=Q'-Y3]psE*n_XYXXXX3p)cABGN/s)?V3Y%bHKqA3M8VY0+*3Z24#Bf@o=+
%8A<Kh+_9:.f<F63aa"gT(HI38=WDSS\@qr$LXT$'J]B5;^4:_aZ#DA%o1]WD`U=Q4p^IA"]F[SJZ[#eLg@YU>81^=pke8W4K[@B9
%]Ne7Z9L=nQa8pbbO*GG-j9sDoHF\&qk&>$@/%oBIJoKgh/n<>M#r,c!U14gDZbs)@,>d>X*P'CkNoD/p?VNiG&nFVYAkL_aCUam,
%L,tt'LE^>9-G9t9P"8Wm>rH[kE?Go:6aM?c)rms.Qkf(I0HBDogQ4C-ifo7&]d1@Wgb3]Zs2]OPTW"ZpSBER3YluQYP\Uh%mNBpc
%g=BNSSMMHp-9GJ?j2_CUA8qnlckmkDYsf_,nd!dC2qG=ai%BfdW?]2n/$>Z`niOj-`t/L9>&HBZ.AUoW%sO\3cVYn,a=[$aGuV/`
%7_-eD^Upi:R:J7^o6p]<LYc]#^_N#+1<EeTm4i"A!INd.)aa@0Cr!6oOSf.ZHe3=6n>!SOl-Yda/F6A\8$eT)9I:X93,oG#&)U73
%.kAl@l(Yt:`.Su]TF(g7+TJ\pPk2OLJiVFBB(T\L-&Z?VCI;5O-Kci8Q@ft3+L-*:W.efPlF!_#cKPd6WY2R-hdSE&Q,Ml73ctg6
%rT%MYrT05eoC^]rV0qhb5"ncOrBkp]ZCem_pG_culhpCgIl9ULVpX]!%Bh5jIp0KaC?T'uJRjG3l6WG:a-$5rl0/:+Cuh>*_fP?0
%+>dFo2V%qLYCbAfOYH)dU^"sb_1TXe+WjdR/3K*\FX3`@'r5i>mc<1sc_Qq>^A4Z0;G-IoR)6%BU9'GT^e%2.,'n^`c)PeD7M,?Z
%^P7Z14oCN>)7u[pF62Ot?R#gE?&7SJDt<L6rn6K(rlKQ]C&J#g%8u5sE;g2WQ=%9grfq+37sJ#>%EbJ^_*lo7^.(+I=>I-sW['q;
%X62=O7<]B0Xk@t%SOHN!:_:Bd5"Q+#Wf!+=..VaM"JUeXFY6aqEF;g$/o$t1Ji1>o,]0F\V<8hIcHK3b@3WY&*%Y#CYn](a<\=QP
%N]q+]DBeB7,P8V7a%ueee>5.&78D*dl(!jO\`"=r,DtnA9!C]>Y0mD=E9B30pNs,k4QgMY,/R?DH]Wd;=[5&I7YUXY0mfjZ<7q9B
%rdN/D-M1d^XD>cgVSC(UMJI\Iq^XI@G15WQ@-Yg17G+;?I37D-f>3&2k/f)`RHWWN:G-!(!eLOJq)NRX-1Tn'>QuXF.,_qhn$$<N
%Zlg\7[D4\c,DLfgM:9qlak0lmET!r^1iphdNWBpB_can#""(p04dQokIOmM"R460e_ZRX4EAlml#]@76r)C2uFK3@Y!2@eZS=Jr?
%WZG/?:mKFB=VG,kr`N=(Y"-Fig(N\GU+VrujWte?,Mqs)P1lc88sGlRc3/*PlW8mSS1Ka9&5.5(.^P%01N;SnC'4^qC]#kG%uSrT
%oL6_q?1i[-#+kEbQ(q5JXAYdlOa:KuE&0pFM&K@B2@rr9NYU!#A<IeD<UG'uq"LM[]i&79BYtQlk/iX9oM^,K"Qt/3k/373q$JfV
%03+GJ_Cm!'7GP%Y4c=U?^,hU,p_=u3U)\E]FVm*78[LqH,;Bb/Cu1i.n\mm3)L[pWe43Yi#:dGbM*MtXVY1d`>ll6Gh:SDt,;cMn
%]egJElJ:OY"mZ]2Xf6i(%t@>/%U,%N&=I@_cRr:UiJJs<=ppk'U)bYs+B6A238t-'"=pK?9(@G8mO03%eS?iG-.7B-"qqljKa#\k
%Ceq9=;!r+T3/MrmMR;T_R]["c46T]T0XA2VQX[FWZ3([fjcIh;e<D;;:eH*82p$Q8M^)QQF]Ihei;V=),'"g'bnM7MP\jQ]b8mqt
%e87FW1Yl+ST--@.q.`46-.m9;$DPMK71H4<BTiOm]-8lPX7>M=?A`)a\ZEZhWQ6"^7TZLZP/?a9NX$d0fd)K"0.]DD`Y8m8-B>lI
%c-3fB`mHd";`&11Wka>/"7=rlMb=r"<-un=,m,==JOQsp/e_Hto?B^7]il\Tl@Y6hm#,$BMs(!a+5Dn=c4dVW?\QPAb/LD?Eao=P
%7<Ml@Xo,ooO1jW#n25rehGq-)4$j-2pYk1ZnE,g4W(-:3VGdNHi5de/j;n\@4!L/%&6[6)QC\P(n^=pMTt^PmMQ]5M`P1$,`UWAW
%lbl3tkZJVT8dcKk?''[.7Bj!G<mE_"q_Jp$(a27JFAa@ai@+S0EbRCXJaQKb=mLE`cC+E>n`+)\.d?"Y+.Dm>*NJ19pJGJF@dtW*
%e7Fo<o.ZF.s/?fV9/%K6];idchadK0kPc8^qB%cm^T=KNd^d,>:^3'XWAX!ilKt.:W[*0!M[jG]iBpDg8h+tJ>hN/R9rOmp@MAkd
%=&:<kAWA(7)1X4q^/HXdPP,pjgLO&",W9Ll^>\n1^u#uBI6s6?8NY-ee/I"5]_:'3KsD;G,]'Cf+A&I5<9X5Kr$'6_4h%(g"Z'5'
%_3Ydt-m5I=K!d-9mEhW,74D6:479$j?raQU7QRUel*TO+J^(e1@g.pp_)A7jbL#Zd\;!/]jAJF\%gYraPCoj?##6=M0<UrMNrgFU
%[SeBM7TG94;gOP$)c=4n+(>XajG,iVneVE4-!\cCb*E;F6W"Kec=.kT?I',-_$?e<[Ql8s@3p]Q>I\)tiPI_eg=/M"&b!V)WfG*r
%$SFr/$DNa)c?C+!q)TlKM*t",-?4A*PD18+8N6`r[!kT4ortU=Tfg<k#_/[L%Dsk4R=c.bediq!KMYXe,"ZT#_!]QL3&j!m]QP@I
%O_>?.`J;sJP`dsR1@[+oV8G_E:'34X9$kB)E)Md<etc1L(p=Hj%KZLH+`dp_)0E`Ym83_8n@4BX`,0Y]<+)tPl>!8V1X/58bZ5(5
%_RC+ALTp1DN=_0:'>PRg.\V7LliGEKbPtXP@5"r<'`m36-nne/;NqMI;o$6uk'Cp*_`rRPJ([IjB@go[Af$N4;`_aI<PDR(gu3cV
%TgHP73!&MqREG2[:CCJAga("u@E?9Qe&C8/V1iVL5DLr\'%"@HMa$^1RQ7s?--.N;()Fk]i50lu22Xc.mtYSdQ@p$j@RN;j6tHuf
%?-UON3ZX=)V]m>8$X:?9SDc@ZFCC[9=)oB4Su;pV.#I.0!rO^'7GhZ6;3HgbSmRE!=p!2\d$96'U<:9&a/:%X5iOSSj1<q<p,\Q`
%Mn$-]h:BmumGD3q5q/8C!`Ji>>m/usHo=4kh2"3/.LFjk#@t0L*'_X).;ji'F0+b^"%<`L`&^h[h+JFpZO)_o\HD_?:Yh8Vj><hg
%[Mg)h5kDYNm0-QJ=K1J#o]uj7ft&hh9VUl!M4[)C9'K2Q)1so#b&(do`"mF#"@F.UKkXgI$JD@P3E6W<8:+@CnMlGpchm*.d%M=.
%iQ#uZ'.lh!iC/o08*aC/?ebr*4Ef^_5!4$%AOK!j9"61BE??..`IG20i)h8Ibul1pbS)mkOQ*7P#SD-YiqZX?;[AiIc7%`bc\kic
%%\,@hXA>_,hV9ZtY/ls1]$p8.P)nNM:uTJ=O[%c%lnjJWTj/D)LkbCWMj=NYAlMB\I9Ll0]F5.pFA4nMU>C)O@X]_.gaU:gU,-oB
%cr[.uBoot:((gkqh\h#CK!9!Vf4SO>*gK'B"dbN1B69I5,jc\Q3@JpD=@?%(OG?B`Qb\l$Fqe@oQ)F,n?S1/1PD^)3!7:Z5DXj/T
%.;MR&:X.0l-"-MV.=M/Qc<]g$U*AmhVYh\Al&ULtHlQi4Os^uU_tD49X6!-q:)%mn0$_mC,.JN`<0\I3;c\9;;S$/IiGNFRJciAe
%nW6<Dje/`;^Q1$gH>NlsMm02Gn&l;R$[7D0;+>][*$nW5N[!;MX[bZW,o`p(8J<&!A(/.Bs.-R_C)phuk;^L0SV<^)R;S)J<L/;h
%l1C2!:6M$\M'Fh"STNgdpgBTk/`I3@#Aq\B/:(lBSd9JO^P*c$pdBn"T:=BGk_\bl+b08YB=$]`mK521Pc##[S)h),Pd?,"JbI$;
%!If5GZ/_DU2gB(C93>('p,R,7G4SVJEULC?*!g1fMPBL%I#Z9ZU;HFcq_ONdb<T_3E'0*L]<eNY<7#U2%_5r1LCe_+-RZ6*P,L2_
%&H2Y#>lGJ9gHU,/rP`(@eZc[?5mT3&].e$,Of6FI3f.kl:,+q)NsmSCcmQa'Y\%5-Jlg3OCc!V-?bJ%T0?Pr7XWj;9MIq#9#N!E9
%[&uGa%nf1QmT-qWK\>,S,PBFh1hU\&Da/Ci3FufZV6C\&Oa>XDjEGYVAXFM^0WF*TC'YVBZaB8dDOL3</8OCE8_%U"GMmQf4h%RU
%9S$K*)][EdMUC2U@)kW*7WSE[rbs/1p[M]-b`%39&1d"F5Y=_HGubs'fpCf/+hYuYNR9:M6?qs6>/hj1Q85fZIU<XLX/i$%0$3a2
%a_?&(qWmj!*7es,UUs;kl:2s7ngohA$m^2Na)9/%dbnsXeOVdd;5FI(;6i%DVWhOf@oj.9CMH/*[!GrRH!,U.X;h_L>[Q<leoh*g
%lakR;#jjqbg<XqXBVW%47N7CSP]1)l7NLh&0Z^OtmK@i2]&q[G#L?ZUEG(%9VL``[&m/H5+<,@NkO$523nd9fM@U)ELU@F1s*OmS
%1D08Aa]R/b-D&#c[FK4*@!).b8E1:Y*R`/Rd_'LI]N?VVkPR^t,/cYVr.]#9lTh6g^bBJ>P9Bh3=nrJd<moRTAfB9L=Dp:&D#@"'
%H?PXL)Ki[[0^3AA2`MbZ@Ee/ra#cHklLW:,I'gKj+Db5X'HZ8ZWEWrH)a^T%F4L7R9Q<GAbRUsfOofp`]3D.P?+nd&`P[kgdHlk^
%_qjU,fjT2/eLL!*2I*!o]tKIb(.T!&<C&YJ>:#rNXLsQ[<8s.FN>Zo'$0Fu_;u2C_e&)I6,E:e^<j5"n5b-X^e%G+dB[a18@0n-,
%G*cUVU^1R<GFBR(ki2kK__nsOh'_5'%t[W3Ec1Bd:_*?l@\jFq')%;@WD^r"BE4H?#G+]T\X?pO2KiIF!T0g3bLYE[)OGjhV&r_>
%d%'N:D_RH7.UcV*RN@39qY!t-22KZ7-_l[I!dmb6a_Lb8Nu';V1:8R4qoO-cE0[?=qRr647FMqY<Y?M5C3V.dReH08Bj<UJQEUu8
%PJ6SP0&7j1go`_4&$*gk%F0]D(pgjKnOC0]_M?>6!RVL+%EkdK!0<[M)^%Y2Gim77+PN[+/1bqFej:M*B%5DPD3)E.BjR$r/h;&,
%<'RJ@R+\%_c+<0sBp0HZ[i2E3c0jEn)q0@I4cs5%n[H%uHa>3[bMGbf[<YnG/ji!k+L2[(bHU1bi4eD'2qo(pn"dY+AK$os\''(%
%WcID8MKB>Sla"F&NFq&(Y\o(1]mVZiQja,Lj]W;`]?Gi=N'qeJMt0mYVlW1H!4_0)='Eb9M;&(,-!]PH#\Qtq]oVTIBj<Po04C\.
%!dAR*LG2eamq,jLRUQp+#$8]&MV6b=@)kVo?(\!nP_#]Z]N>3a'C1@_mXA<=a9#]BEP3u)S:o4+R>0,9Q&OnWgTld=l2aZG'b$:1
%Da4I@k#drj-9[$-J$\)P`9co?[,[>m593:nI[XYf)**-pn>-u3[SYtp@"]0f?P*oE;p=N=guE2VfM"Qhe_N!?bN^fU/"C9@9NQ.3
%<.ZFO/iuc',3Jh5lP`05p-)G?K'-kGDu]!d=@62X8CDR*6/Q+QJpbW7S;QIl2G6Y:VqY!4g3g1M2W,u.7YD:6'(t\/$.T=KW'!iJ
%#t`ngeQC\r,69Yt7e2.)-s?^\nKSg7,q^N'67s]u4(@?dK%+KGJ-d.]6l-SCbpSIEMI8auUgF/(2cHQ8"j\Vi<a[Jg,'J*0Pl\u_
%/N/HZnWU5tkCl#RB:)&+AG+=ol?7`L'+#V@8r7[$@=f_;WY>H\Q=)q=](H[nXsa>4&d2IIOM`FrG`HiY-Pqlu@:fZPYpX1D'A6"8
%lIeinS\u9eEj.?Ajc\+J>24-Y,83@,9h@;u(fZNQ+!O`iV=?_eCHMnP0?LC0WV5St,Ge`Sa2,_*lqEYX24PqsQRE/QFZ<ocDSqj+
%Lf=76=sk+P3^SL/UU"PAq0.hG3BElDeb)_Ni7>#JM"Kr\Whn82-OfC#*k0"2ghsIj\Xp8%hDp3(MHb@M^#^rE9=OHi87RWFg;&BR
%b+E!(Y<S@01Ur;=#3T)NCJq4,JlG@8^jh'NJFGbP2M<nNmPq`XmPj302o?C<0GA8=2(!lfdaTbDDHioK!3I\D0MGE5/o%k7C^F[A
%LX24^^+)[7f#!kTAH6>S$"AJdbq1+*\$:AkO.:DN!Xd*qT2qaY+QroP+M`7^0/&p%/J1@m[j&XsAA,)g7DoSm^a;%Q&4VF5cuW/$
%>]$DQh)ZTM7EC@IP'lXH+fm/'R3qai`%d;.8i9Xd.2Lu>L$<3$S\9a.`F^]dD0=BP7J/dZ?BY3(]ac1ijOI.Fs-;ICShSAb[>=4n
%p?9<WM*UV0)94ZABMH@]$18/am64jXONO;D5c!YKH4Rq;i7&G92'jcN.DdCom0LL@GY=Vbn3ngQd8speQZ]$)$3P'&PpeFkYS=)n
%<B6MdW.F]UR<7$+A"suD+iN0?9/D:#I1b"sY3Q7V>&5"[96nTuI+"\^/Pl35n`g8NJA4M.Lj'fBCq&<6,`9g--^ZW1Bm7%5CGsn@
%hi]A!i_c[5<6$$lR4I!h&3XHa2CK"jPmCG/@?G=]l+!Q-]N^ddVc,7ahfYr"^\;sjLM;TrH(MM#6\)g#(ei!5Y($1DM>qZRm1G<%
%$:4l>R]1,ZCXLR,FQl-1e(`9hh<VWZS!M\?a]hQbV\q$AKjt[2$^&\T^.*Z'fY\KE'4Ps^ml@L<'So'sC%7W9PIgQ7<^kBQ1"l`L
%UF[<$E?E%"9R_I!\dXdg2R^*\V4f_QUnLG*]ieP7mc0=_&rC#Lh?e,l=:,#_C(P1spr0f(Air]9.MY0Z65jqJ'T@d^`P'Yao>2A8
%o&VaCJh--ciD)F3`8<=3Rc+/#=Z(125<Gnl#[]:9:cW-A54b0"ig<)7Ue+E+=Zk*n\Tp@3Sg,.Q^^m6c$584\+m.aJoGEqs'C0`7
%3'm]5O:/4D+n6+g>[cjH?3(&k;M"SL:tTRY`/CmWpRAn(#_4!"?7Lkp&XYs&*l#p&&/,4u,l'kbj0o;lJ/FTgY$!@WU^#7$?X5%)
%$Y3%#d>j*]_$@+aK_>P,%ms(ph<ut\UnY0ioF=;+e8q:J:1&[e3b7g)`*&c:_rt^7jsN9VM:Z&=MA?]R`/>Ih(!4OFFgNP3@B-8!
%VA`TO'EtDrVJs'%9O#k[[jEUW_[`CW4354U*N,DYKe<+(7A21[QJZt%:*?[<0WhuS4l^*g`\p"c\K=j90'X^f^bQ5t^_BkuaJ%,.
%oPeWU8HW`cUgWd4r4sR(k2X"T*,/qbB+lP27?L]'P>p!gs%]bsNO%b24<(/:]rL9)[Y@&+Y..sJ8uN*]/-.$H#,l[L795JrDXXk*
%hVNhR"NXnfqnOn"%m^=lVifXDT">orb6R\UdR'0*?kQ7g.5<]hbYLkp-adha:T/lf['OlcmgP-"edBRo]cHOG(FVmOpae@fj"([t
%Cf]K@,j)/Ms5\ml9<,TZ*,?PLJL?daM_C<QGPlW00M7(Iim`Xr%K"%_hUD/jYtILBp2cq-+cQM"d%RLmi2qY`W/32@9SL:%1[7rh
%FiXW58H"WDEZ((J%K03U(FP&J\8YK"Yp*g$l_RFH&?RBTS2OI_]&AL5DL[j$*n%!Lo`k')\!W*/@mLbK&3.TUWr/68L+Ir>X[aKF
%(nd`YmL\42V%6f)+_YaK0Pq4UYR"NrHJbo6Y5/1c0)T;9/g,"tlcL\8)TO;!#AKU/&Kj2i@Dd1WBX))He(IjXBNP*kjm]c=npW?j
%EPi$:pR'm:!UIF&DLjI73!5#q!mUrs_p_qKA0Fj\U&[,ngi=/GMKQ4kn\R8"g=\X,P0^Z"HT2H?KXHUKh(&-L949.//0b"29X36&
%"`_^l=q<]ELNOE%.VUP)02&<"8\h!KFf>"3)3h:L<s'.9(8g1PK-pS.rl6`Y+ED>aCp-6"5+KBh,'0N7!^<^ej\<"-GE1.=.]Z3Y
%l1p?YKYfW^aN/A@0C#"5)h@qNr4L#9L.OmT[Z.T%_rL8RH?D"mDPjjqe95VOm1cJg'Kbo;b>EXP05#*7r<PY`O`Qt$$V.j$VP7'c
%4>Z&:?VH=>r.s7a8e=a9>icLjaCcOk<r*@g":UK[dNd[DZ^l=u]H^;\bIW);-.ulU50onJ=nIs;0L.`unH"PLT[O-PQ%78YdU]Hp
%XQB!,/kQj=5du1m<]<aeAn>Rl5h'XoSoUJ*-pmEMCT#XaauX)12(,DJl,tGql>*K<J:;PB[;(q=Y\W&]KbE.a&;F@9etHE5#gfMQ
%3`_:LY[U"/Lub'9khi6akO[uYpC]f'`T)T\/^Zq=-/tHCQof>5i#R<d7;n26;h>7"<YcNPTgh5'1O8"mkO;NljPkNO"BVCIM64K&
%2YJ=-p4c$-WK3:%8:kXP9VRsh%o92[\SgD6o"iA@:gf=`)DjPdI&MQVM/pXIe6!?++.,h#<E+A.RKiJaQQGnL-ju7mA9^8+^[e+\
%jm$0k!B1s*:W$L:oN5%t]9NetCKa/&-)S;^!.%gBA*0cAf-IfG/BWiRa8XS+nP3=6Ec_]ADgi1dq%g,YiWc3aQp&hCjsJrX'Z#2X
%[--@h8MRU1rhm6Kfk5"7n;R2(%rXscTe1N>FQgDd%4R\XXA26k9B?DeV`V>%n%@GG_FkU,k;ZlAD"b*mG,d]Zmc&XuGeX+Ch[=J6
%6ff#PIpW#_7OCRa1[&M'4tinEMm*>k$#&0f";oZ#rfiiZTeC-;0TTH4U(:bfBou0U<i+Lmr);,1(?AXWMe$&YZVMeo":FL?%UFOS
%Lm_YcKH+RELPG&%ZsHVn@Pte4m`@@e&G2FbWe5/G#fdq-hI(fT;EB2CSiQmSA6.6md$_-8Ua''""%`#)]YErJS7FT;AX1<7Zr(8S
%VhZlr>=j@'8*Dj52(JdXmkNU`(#jU9(?N0)cu:FfE/W1=X;0\;nDDsC9l<6*Rd3T2;@FB_Cog(dQ%U2*"^hT^.JYqBJedUsZW"!C
%@0m)WSQd@DH^RN$?kZC8@hgSsbFqYj_21i^5Dk-/6n,m##7Ai97!.lXN'O*]cr(HhQdi`kI4bWn>&mKGJmfF4/]hSbEm#_H`I+[k
%hVe"-Mc>R<e@lWW</kT-r:aOt(!oIP:,"AYU'j^&+oPik]e$0bK.!:Xj3s>JANem"AY#XY\dKc6'AduPWQo<gA_%XR,>UR)DrOI?
%Gc@UmVE[cc_\&F5fc%0iP\>:QM,nVr6$2J2m;RGH$=;^+&.\kY+%,T.MXg`q8Yp`&OKZPI)DS"E$A\aS@uT;J9hJ1cb#f.eTD8/u
%8'fXdaO,g4cm-V0<TJjPft)+fFq)i##6ML`^kLq0ML!^TZ&7Q^.`5rlX'D(fFC9\qRYIs>Q&pX$4bhW\UYr30QO"k8N[X&rnlfb!
%Fl]FXN2b9d'#;uu7u]Ej:bAP.AtD;[mT"YeRESDE1kX6C(#OU<b$I(hdD^nPPDqALXJf,O*QuSS=o]%XD#J0)9h3$6dV62dr4"UH
%2)TN'e3mp3__4s)QE$t!YKi3jC<d'OnA04jI(7fgO<E=PcJGGM`&YHh%FG@INO0?V78t29V2U0Ynpt*Dj49=dW6\b.ntbrW7lp=c
%X:HCKRDZ_>lun^:.JQ>oA<DKX=-Fegf4Gq6+&e-EL'b"r]l2"!b!_Cp\1E4HB.J$qPn[cE**i`].Oj"m9d=?0Fl,lR!I!%G3ZB9Y
%=7gdD<bYn`lYPg'5[2cl0YBZ;$YQ$hq0p8mY2:.\R0VBTDC-[0-l#RuBNW6TX0@6;Tl7p2VJ1ZEDcVu"OIJdo6cVNIasdDiA:sn#
%`C'[F%eo(l5?Z*+*=Lh:gX7kJh6]!=%[A?'Q^g[*=0D_&?9R(LSg.4<&g+?*d-ZU3^`9<UGT@kC9DV`-G*7Qb&V]r^\[/sP.AU]=
%kc3M%)a"16`1CIB(-YD?lU\ED3$8GYC#(G^&@f(3O';D)hO#"S+[3(0X6HC5=)47A=7L#UFfIE<_gm+;QK+hHP/L)d4rOt"rV8'9
%:1k37`5GMkU0p`27?kC:q15@&q3btK$j@[S50ouBKh2)C/9E#$:jM#cGkrt?hP*$%C'eR6.V[UAGG'$1qBR^As,La/ETR[TD<c5T
%!%1'm_P&?&r[UM,q+l8G.0W:_"cl=J.H-K<`Yh;p:,?@!U'\7t>X\$3-`hrF`>nFpn0kFekXQo)?3[.pN`;T.PiE)`Pcgf>/D_FS
%L.STD?kfY#<UVA*eUr+$K/b3OY(p)?i;#7D%Dd765Z\;YQjhT_=*p,)+T'=*>[3'U<m_#-4#r^)L?n"F>#:@RZ`JB9,!KTI4ICp[
%%oC@V44M]>!u69Gb"k0UEQ1:O-2:Y_bK)gKVep'#N@E9ur-Hn38^gt*An:!*KFDA^.csPbZOA3R!ahZgcJHGe,-MZAUM]rBgT?n:
%W_hOrIj@e]a]SKQp;>/4Ij2#fHp%W%7Pta",!+%Hc?=mg3;Ph-hX*(D_hZ3gHS=>^,Q]Yr#r\^!0p.q+0RT:D"D5&PQ6OrbgGKn@
%os-Qans&)AS=j]o,.1'0Vg=ealVoG8Lme>9"n8V[d1B_q,)TZ34<(AL3JW?%<obO7OBZJNi0f!<Ef-.2:DDA<01*>^Q=`/@>+3%M
%VLg/M@o#:o2B'_RY(3IYm#37$UT<ZOYnOFK.-FP\YCL@4%-.Ob"H6c=E?IXTL1@.f(&$N\?H*N!*>J^jn+qs-Y[;KSm*:K_;CIJ`
%dLpg;/M7lt;^F9\6P@/@Un3:DaKbE/`?(o\9"Y09biNtgC/Gil4,<JFMU_06\%9U4/Kg)q-QtILR93oLO$XF8g4WI=2r,F0b)k]G
%/7u-m?G'T'q-4Z28\GIiaST?e5C11G@`*\cs87c&8Ra;Ro+6O2DQ)hm&#ea$]$faHM'B6#2TUGu_I[&7E.jHB9Wh0ShG:R0!M9m`
%\<=Fba@\M[H"+onX2?t=\QJKTP9(Fpit2_2lTr?ide27lnoj9Tm0&@h1?h.6Qo'h-HH)gcKp*rmAkF\U5+t[T!Z7-\Z?@5[#Z+.Y
%j#5"Dk?phn1#8SLi,cIsNC#B4B*ijHK\dn[:GTOGc7O$@n[)AS-;jQk/Wt.3_G(pWUtri"8bOd+7Q0!SqW'+*E*e(a]@t['?_B^b
%cS*GuI@u49:Wq3]d,MsdD"S)J-k;D99^]e?O,,W$T#MMU`U-([%9gf-.B8m%m"drkMIbt^a2q2$;Pt'EqR.\E*5Vd'BlSKX`i#&M
%\eC%]mq&l+-+YFXDM@b0$0c61o#Ak$*a"MW7e3t-5mP:#:Ib47onBimJq\CDjac7ESf:=O-,#-H@%nJ\a-MRGg>XpmZ"CY/,g(NU
%!6aWYd0ssRFW@XuQ52QFW4eSS^mjoaQ[@=SKtQV/:7bUP(7r&V.q=FA2$oY*2@SJYW`iJN)TONuOa+^>Zt%QX516Z?3_c;X@SL/4
%"ASY_WWIil=_`$K$:6Drd"k:^][tdBE;D:(!BfFp6#%fNqpV[9"12FK^iu&LEtL\_,WU4ia\g%Dd]6.iB!R^N%@5@NN`oZkWL5tR
%]Nf_q&Si^t6\f/X86HN59+EBNq#`8P`2PcpUK$P.+/euV_Yi<)>Y7&U`K?@"Z/f216q`PIS,tboEAHhD]Z(C>UF>s7Ul`i:9V+@=
%J*MG&XbY6oo_duVBUe$FYir$s8oLe$0VT5rQK]<KmY^g>DZ?o"8CCnW:WqmN`!#+Q8R)Xj`4c-=hJi0EJekB8A8/Dk/YbH4Qmi#h
%l8X.qSM()-,#:V!=aiV5Vhdj8;TM>&;)Cg-bXR/P,f@!0Z.9JT&l&*[J/0n!Hm_3[gK!J'?c#fCa8%Oe-*"1LmoA'dmpGG5?ZgAg
%'mKP!-WA<X^--mLP^&`#V]'BC/XUoWP9_U=UEdnr!%>f&Es+#BS_R&WHr'\+YTJ(Y=jc;+T(uM7T:21`p&H=ogoNoZU;Loe[X1RA
%`g#]Ga+6'hFoliX9+C?gee\KPas-l(!TN@=2<Q![!PbO3_]tQ$&<RYfpSb>-h)37K!MKZ[(<5=Mn%[ufOWml+Z3a1dY[8e2--bX/
%%M6a5"L;l7r<3F^?dZLc!J_jt,<tq2^Q)To?6,ICP0S;OG$sU7!_rb"34cdb0Eb%3WUdCf>TL=?]4A/>/#l"W^'Ju0a"O&,;p%J&
%<O>^96R=cA+U]broDrXi&hCpl581Y'5$pIVJ!ZHk@FZZ'+4c>P2qY16J16DZ8mr#b-[E7=-94S)Q)'@,n'?bTE/91T167C\.]3;P
%YCleIqbj8oP-4Fi4-IOZ<B7ib+haldf9BN1MAnR>&6+V)P'=mNLPkt5;M\'1["jV5'M"B0#q.XY[iUkckt=qqbZ-2q6.i3^d`o]#
%YUYcVa[aSkEE'W*+%]Nb6lY+t5?1$G'0pl.d$"OVOB<'s\mR)XU]#<Wk;obg)"7Pc<cNqD;=PFBM1#CPk1R\:.'NR_j^+[n6B9.S
%3il5N`!pA08q\Rungu3gP8pj7X;+[a@q+`38Dcs'96q;;i]PWp;SpuVXFXpC3G%M="8fTT5Rq^W78d6GC(a)4=D$UU+:K)YZrP];
%BMmZ/PmFF2<VAbmS<QZo:J!3?g2'gd9]"@8qR<.K<L'U<\nW0Vim0ctC-"pHg!>Li48fksa.GFJ)8LWq"@H3V'$t"$4#Z%iBTu.2
%ZfqlQB2U8(3jGsU9`V?t/baYBjg+A)F\HGt,69;HUYY%(hNfXW-3ITg%qc/Wf,XQ5J[+V[Qi<km/i$0q8cc4/3Un4jM4+t#f1"k<
%X9'K<]m&OWNTpdi5=TS;NTD-q=;P(7)S[Q=`@7dn"eV.pH3CIQ<GONo#pH`.YhL//EU=LU4@Opp`4fb/FUho=Jq*GhMoa6:dn:F@
%#mL&74K2di_IRXRq;HIJbcI+dk=Bh`75E$Jaq5@sX-2_1HXtuT42O+EUIeEY%(]__-X#n,LXF2l-&$4OaV[IR#c"$'4m`E;``*8D
%G5i?M47R`c3_Eki#0s]@[Iq`J,C4,$2k_Cj]E24nRo@#'&8b"T:FJK0\88BM9uTcGh/3lS(8cT).2m?lha+I<98[fskFS\;UqK:U
%bShr2hPI&TLkun?>4B-]QJKaeEu"KkZ9ut$jM]PlX4*+miM;+pEW6[1WP?qU!&gF'C<b;H9ji_1-f?u/ku:7-:k1`TLR4<[DRh]!
%ka(aaL:U*fp+!9=[/:_6"%XcFK:S#SAMR46?6[$JMIGIiC)u=);Mr@B]X<L!Rq\$N\Mb;X!,*g)c8@X(V%u/?mn,Q9gi/ndKsd"8
%*Lr7b[Yf",3PUfK;bt-@CtrD/<F`'+!osfni>u393F[bXc&8-[$(ITscPqm%5q'%BSp!gJC4+!g11bI=.B:WT\V,3VIm$#f3g-dp
%/o/5_&G7R@_=-jS,PIGl?Jm1EjR\5XS6NI=1PLc]_TPQV=fBI)a^p#hapNLa@j\$VK'YjR>OH8FcC..hQ&89+Ra@UFj?Ycam"i)b
%AXqL+p2`5?W@UlW-m^KBF.6r:A/@#UVOT[]s.o##U%qYoPj^o]Tr>SO,S>'jfW'1]JJukD',%oYP8Ef32#LmmIeGdLp>,Y(;s=ND
%HbXYgRg5Y%!]3HIM"XJ5,,T,7(pR$*q$HTcHrT!P@pNN"a@hI(?U7_MX0,:9Uc'1P+g7?4aDhhL7Po6JK]EPmL<.O:LQT.OY56C%
%E-PGNEYFF+X@u2mX"3-I*VA4qGgEc-W^FLK3j*BcFO$M\n)kkY?UVk0OYBd?C&`<P(*K<nr@XeI)tt^HO>L\X#W6$i)YeL!"+mmu
%UtSu7<9$<`orQQHRn'X<:8*0D9_htHh"@>Om$k07b]s14%LD,Sh.FquhBF,HDj$Sc6<W8C$Q&a.PO\Fq4r5XN9;C(1[JDo/,&*u3
%BLU4af.YJkh1?27oM%'6XFi_TUe*).+=J:DWW'G;,F?gO3K6uIK61"KIWakq!V%NLpW`GO$A>O=&<DC4Z*2\XChP>eTZ`%3@Y=CC
%hZidk#TYgs;#(K5aRibc^2pWQ1&/=bN)s#E<jb-m"2#gG"9j+!#c->1FofdPUV=rs!o([m4%Y0sdjVGE]XDL@F[1MPp?=HT=*R>G
%9$0NS4m#RQs+rctTJ58NP60&:WDl[JaAT@silVjVqtA]VIar@rKr'TmS5\Pm'S)2T0%Z^&LP=2uS^gpdcp`4sHrPX4V+E1<r;62S
%"tYq':FG.<*jDG<L!V?%QH&)8L40.9[Ck3!C4l\ZcQgOR<AmM(:R&gs,_48DPtb%OWc-cY)ptkc^`4(&Z-&d=(m0]l"gG'r9iTdH
%fuU#=1IQo7@9HTFQ2'Do4WG9MKFqGu_1?8]T"RkA\E^tEQ8!IinnifK!fh32?$)GTY&&s,>7K3*Ap80G%8;r7Zq+43HlTFG+0S^j
%7a80o_V(lDeejM,.<r\:R3'1@VDQEGn1lrnhVBs+FW[ah+'&tmVCu.t@&4/dDq?!VrH@&UC:K!Q]6bK8J<F.h,`%,J3lY'6<heRR
%6:h)HMpnoTnjR<dg4H2Ya>,s6dI*?U369hJ=)Z7rQ[SY0Ya$1o5s&k)7rn9s?trtkRNB1Sh;?e$$tAPiD7"a#"]!ru7Nnf(bW]@8
%U3k!hfQN^J]B9Z0a;*iI2a-pfT[EJe&/?XZ)6`Io.BXW)?.K+gN3,13p?-J%>rF5Emtu+3Ze7OJkj*)i0cA&J-IlEBp<,[,N$??V
%S6p%IF$s?Y=hQVirG7>O\X53S.h6Vek)Q%!jd6:(AP>,iOBdd:8GWT82m5.k&*$E4>I3"qp"@gK#To6K06JpkW,54?]J-Xo%h>_9
%q/`#p5`g.d+q+k:A.h@>Dag,GK(Ph9Bo*5_GLK+4").Z"WKQT9qt7hs#f8@Send6_IJ3=3#ff$!nABkcg!fD;)PP17]I=Jmad*mM
%57%iNh[PLl=hdn?o4g]fYMX\&b7YUj5&(pcio%]"T!IkFA\6g'BWd<KRa'usc^ru_k`M&8=3<q-!f'W`bLf@Th9oB</Z)$3K]3;G
%,VD+qQA5T<;c2f#0WHVJ<=I:*ZA^:tUrbTT!:AJO%1:Tr7E^-cEEF8[,DdA/c.7]FX7n=Y/1SUPj.K_ZTujoH#`MDYeB9Njb).=D
%+f!dihG(Y>,IrnSDjUUD]QL\WES^EWYYrC<AabSpY>ei2)Q&9-50!!7L2.@Jg"TWh+dcP8X9Uuq;AqO3@I8aIMnkF@8kAGc%mn#<
%X0cq,4cHN0(._U<d0"j^C`)0#nN5K5%P'ht'cfT`F6/`=L?W->fsnHCE"-2upGUGiP_;DT-']7O!.dsR7PZFR3B:3Z&:htn!P)d5
%!dqIc;+MKS`msfq8/;f<?<p8u>k&EJ5T?]3<;")o.YHP0q\@!]60,P\fkfOCm-=I&`n2SQU.WZU;.Ys.DH7bdWiE_$=[\DcUa-&@
%LUG'#Ql],SIU;iHTnMN7HCL51CA]iG?qcib=FEc<]Y%K+9Fmoia5,!pCCIP]\&%ni&-p>>pH6\GnF9t@qrPApgteA6oAid!6]"=V
%S)GM2[;$&qd>5<+8onW8bAp?DgW^",<g&JJoL/?6q1@5[_XNZbgpj?2C>J[Kk\Y]Wa-SD=HRA=2[jts3.g=<j(WZ8!]"M%<]D&j5
%b>-O=Kgk^M2$@!^bf]3gRGtdgo-t8$8kM5P4JP"+r4ZL?)lAC+>fI5uL2.X4]=7=MK=Eqrb:he9"ZtZuP-?pbbB#c08rrIS@#E1X
%0Ki,%R8c\g2$=tqK[oF+=lQ1Pl*;X7[-YK"km$+lG1eQ4>a-r1D_t^/(qmTl2'.>DN#^Np*67rT:`3;Qj;arY>IF1fF$<g0j12^m
%6D[E*,>+N-U<g.h).`n?B6TgoY5<1Or3.A+XV1BYh;OgGmBX1ibO,!mZSdKbfDArc,uD^9S4GrC;^`k#,Kn:W3B.BX'.bRdV>/Nr
%/J!]^?K&GTAus#tJ`s8&-*I$)*o&GU^`rZBXXdL=T!$jl`NXS!))jIBXd^D<]o=blJ,OT9+9R/jL-R:/KPo*X6hV[+G&R[66oY=;
%m]p%VKCPdb!2E\>"kV>UZGZqBiA,"HF)G8L>F+#m`NVIHVrPcdZ[)#7VsalSEArP0j?FTTY:X]L;E7o+&"+[[R>hrETOX.,ij:hD
%1msVp>Kq]7X%m5L[4H=:LBSp?#\GGUhE/:mg!7E_?#`u`lh6=_B'\SL=)VT-rEm*[5r]D9(Cc;ZXXt0Bi%fmQ<4WGeS5\8'YWV83
%PUuauCe)1('k_,cRjfs.Hhah&`%6Dk]7]##D#7e]&uZ5rghaA&0`$);Bfq"50G2o4-N'>m[pcAr((=5*UQW<ZZoP+G0'CLOE8E<;
%J6'RG5l+,le)H;NLXQH'T[7YY.o]DG@^rQYVMHFfZcq88[ip^uhM1lT,`oA+Gmt4JAOY8;/mBT?;Q6jUgs3(:6?cX$Ti-,08VP'/
%,]I'KU3YYh\900imCl(5Vs,K?\2@O/+;L^YjP+p7+)j85D\<FA[?"B>PT&B;'ua6%;KH2W8#a5C@=!S?EEE9X2!cKEb.2`*RGtf_
%T+<I?9o\!+(lDKsi`Y#Y_t5Y#n$p3eE"-<#pGUme%32,M@L8$22NB\^9>HVJ^]9$,j[I@.Qsr;+AsHI-RhC@#GFN:rNGZ+FE-8>/
%5kD!hI9e^(&)Zoe^!Ud<`9?XdZ,XnQZJ.R]5P,hC]NW;3n2tJEEUQ:,U/:fAgR$6tRlI=_^i-ZIePL&noqf93>)UO@/V[6mh>(jC
%00?r;rUr^e229f9gL)+caSUl/k_7Ph"^CJs:pfiaC*[]iFG,o8O'-aifdr5U.RQ?n$L?j49A1:2W]&R(B?T@olDMfr-PpddeJi$3
%4hk5[9`".d]@h"[@!;8B8H&$1;/'Tg>.N@nfSl'4+:8X/m=:TfO64q+\%;S;OR@6'LYuuI2C+`<=dHSM6[JBA3g(\Lfm4;(m=)T"
%n@Ns=UX?[=dF$_,7Q:QJdk/r.AZDel="D(+O=`F<Nd(T.c*q[k2`3bAoIrHtjn3u<B.)`;dG)%H<V=OLX@DIBI22(nm2%?QTPhNV
%d;U&BkjEl'O"!G=("Hn_`DEE=<>bPf=j!\!i!iQI:oU<+cmeF\8'mke_)k^cHm(oa=*N+-Q[QA5@Mh+JV"SBcN<]M$hKIR\H3?=C
%mr('g6^un[5MC>h0Jo0qK]3S,K4Vp/;43X3LnfndM`mX5Z'P9!;P<mmBqs4?SNJCX7X(=n(O`f"rgF"1.NmS0UBCl4WU6]oHME68
%mELB,%(!FpJW;<M18kf5"%i=Y@O)XX;3qPAJH9hh@uWL<aS7]P(38JL$$*.[OseP%=47d`N#c:E.J;D@U,MB&$?$^hbJSNBpGJFW
%"*.2pO"el,RPeR!9eb'HYHSnlnE;nC-Ujl*"&;D>hO<3NB&Q^iq7@T>##K,`G-tK4M@Z\H%jRaCkNl;VWFksO?sHbQ(*C?P`b)Q"
%o:r@q0oc?i1ukV[%(B#3bJm#0n;%n^aa'QC6;1HWa%BZU=HqhN(Z3QPfbNRSX/ft)"ljgU7S2@$XX?[0#<:9N%*KlGYeI<oC`?/l
%p"]m`\q?E`6]7p)J@*up@qgdO@.eVd13JkC>6B+QPgr%J-#Z6f7>j'FFL>8!5rlZs7e%;F8?4*FHJo$1(EA`3g\JQqZ[)#GX7&Oq
%OV:`X=Z)crL8>]1.gsDH@26:F%VbLVOhMO/1:Q(mf)]2V0(.;pJG:cNh(;Q1=2/$A-l&>CrSAPo3R;dBIbc\@!dthC3#f#/bjO?-
%3teN'(WS.UQWWf;.l]Wunlup(D-/R`b&94++N"h+nF#RqfrR3V^%\p.ERFRGZ6!#B\>qR`Bdc(!Xr=0mCN7DNNJ9)2F*I)**Bs(e
%%t6SPEH.'f<:i@\NSsXU)7eK-%fpo&[X1WWU[BJsS\"<$qP)ZIi4P[8h(@)To\5@U';!Z\n*TTkZ<oL`qX(l/fl2p[G5(rKA)?]D
%X3t-N/0PPrC5#'3OR?[s(2D);?TPe+G4K8)G!r[(nk2>P@a`i\DU:9$LLC=_F1BoeMF&R<9Xeel8WR98gh=3W@!)-,e9D1Lq.i4B
%pRV6L]NDeA&0P:VOYm45e<F?$]SD20,=-T]Mq)W5l9n;#l>&?CUAF,[npM=i8ujl^HI*jP<t1@B]C'Pp>[s/W]aaZiKq1kSG&kai
%,L^8+(@L+FHAQP0VYK-b@ql[W.1?aY"F!G]bXR\!*V\F:[)D(cG@?0!QSckM.DmK/p?RFo@@"+,X4_=Gq<[DD!J]4AVl@TCluMJ'
%h!6fRY(6t1#@@tP(eEZV5"(/b/.\LV0;J_OZZHE]rTn9%iemYQ)9&)".,!gaMm!!7XuIuDijc8DCu5*VlME<U3LPN/Gc?NJS/V70
%-)t2@(Fls`;!(BEhS*6p/DDbH>`Z^q5FY4iinD"JQFNT;(e-dGU^'q%`U\TGJmmSMo<q,`ET=Bpmme2+`%SsKY8A#6B"X+iJD<SL
%YLb?I#6>d4TJJ29L6l#tCc"IpZ_(fcbIp='?ugt!Hg<+b1MaU/=C/j`Ze;q]dFHtOa/V+LNWT2eVg!m?8nq37akFum%;)0;aokU;
%PKl"<L!+AQFJMf9B:C'I)8@.lCA!+^Cn7Pgo7"5bQlZHbNn^$4f+:DqmpdBm,D'/PK#e74P`Jo3o4SW=#`&L1(Ks<>R@kMqUp?J!
%VnYpqYo6MX00nRaD->ku%g01ooccqKIbB(ChA5!^]53l,gNA"Pi>TZ$mVT=l2r;2cs8"[(o@ncfn*5E!]0H5VDnl<:5QC8OT:Uep
%reKD2_pAAQO2(^us6\u6roS.uiD75g?U'&9r?)"='`@.orqrrQs7"($s7APTnW,naq9siha8_-Q+3bo*p:#PGn,McnroX4^rorIO~>
%AI9_PrivateDataEnd
